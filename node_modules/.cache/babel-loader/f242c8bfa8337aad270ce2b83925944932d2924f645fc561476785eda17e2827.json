{"ast":null,"code":"import headerTitle from \"./ExcelHeaders\";\n\n//====For styling Contract Variation Cost Excel====//\nfunction styleThirdReport(worksheet) {\n  const greyColor = \"d9d9d9\";\n  const borderMedium = {\n    style: \"medium\",\n    color: {\n      argb: \"000000\"\n    }\n  };\n  const headers = headerTitle();\n  const fillPattern = {\n    type: \"pattern\",\n    pattern: \"solid\",\n    fgColor: {\n      argb: greyColor\n    }\n  };\n\n  // Apply grey color\n  [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"].forEach(col => {\n    for (let row = 2; row <= 5; row++) {\n      worksheet.getCell(`${col}${row}`).fill = fillPattern;\n    }\n  });\n  [\"A11\", \"A12\"].forEach(cell => {\n    worksheet.getCell(cell).fill = fillPattern;\n  });\n\n  // Apply Styling for headers and all cells\n  let startRow = 6;\n  headers.forEach(header => {\n    let cell = worksheet.getCell(`A${startRow}`);\n    cell.value = header;\n    cell.font = {\n      name: \"Times New Roman\",\n      bold: true\n    };\n    startRow++;\n  });\n\n  // Define borders\n  const specificBorders = {\n    A2: [\"top\", \"left\", \"right\"],\n    A3: [\"left\", \"right\"],\n    A4: [\"left\", \"right\"],\n    A5: [\"left\", \"right\", \"bottom\"],\n    A6: [\"top\", \"left\", \"right\", \"bottom\"],\n    A11: [\"top\", \"left\", \"right\", \"bottom\"],\n    A12: [\"top\", \"left\", \"right\", \"bottom\"],\n    I6: [\"top\", \"left\", \"right\", \"bottom\"],\n    I11: [\"top\", \"left\", \"right\", \"bottom\"],\n    I12: [\"top\", \"left\", \"right\", \"bottom\"],\n    I2: [\"top\", \"left\", \"right\", \"bottom\"],\n    B2: [\"top\", \"left\", \"right\", \"bottom\"],\n    C2: [\"top\", \"left\", \"right\", \"bottom\"],\n    D2: [\"top\", \"left\", \"right\", \"bottom\"],\n    E2: [\"top\", \"left\", \"right\", \"bottom\"],\n    F2: [\"top\", \"left\", \"right\", \"bottom\"],\n    G2: [\"top\", \"left\", \"right\", \"bottom\"],\n    H2: [\"top\", \"left\", \"right\", \"bottom\"]\n  };\n  Object.entries(specificBorders).forEach(([cell, borders]) => {\n    const currentCell = worksheet.getCell(cell);\n    borders.forEach(border => {\n      if (!currentCell.border) currentCell.border = {};\n      currentCell.border[border] = borderMedium;\n    });\n  });\n\n  // Apply borders for date boxes\n  [\"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"].forEach(col => {\n    worksheet.getCell(`${col}3`).border = {\n      top: borderMedium,\n      left: borderMedium,\n      right: borderMedium\n    };\n    worksheet.getCell(`${col}4`).border = {\n      left: borderMedium,\n      right: borderMedium\n    };\n    worksheet.getCell(`${col}5`).border = {\n      left: borderMedium,\n      right: borderMedium,\n      bottom: borderMedium\n    };\n  });\n\n  // Apply full borders\n  [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"].forEach(col => {\n    for (let row = 7; row <= 10; row++) {\n      worksheet.getCell(`${col}${row}`).border = {\n        top: borderMedium,\n        left: borderMedium,\n        right: borderMedium,\n        bottom: borderMedium\n      };\n    }\n  });\n\n  //Merge cells\n  worksheet.mergeCells(\"I2:I5\");\n  worksheet.getCell(\"I2\").alignment = {\n    horizontal: \"center\",\n    vertical: \"middle\"\n  };\n  worksheet.getCell(\"I2\").value = \"Total\";\n  worksheet.getCell(\"I2\").font = {\n    name: \"Times New Roman\",\n    bold: true\n  };\n  worksheet.mergeCells(\"B6:H6\");\n  worksheet.getCell(\"B6\").alignment = {\n    horizontal: \"center\"\n  };\n  worksheet.getCell(\"B6\").value = \"2% per annum\";\n  worksheet.getCell(\"B6\").font = {\n    name: \"Times New Roman\"\n  };\n  worksheet.mergeCells(\"A11:H11\");\n  worksheet.getCell(\"A11\").alignment = {\n    horizontal: \"right\"\n  };\n  worksheet.mergeCells(\"A12:H12\");\n  worksheet.getCell(\"A12\").alignment = {\n    horizontal: \"right\"\n  };\n\n  // Adding \"-\" for Cell I6 & I7\n  worksheet.getCell(\"I6\").value = \"-\";\n  worksheet.getCell(\"I6\").alignment = {\n    horizontal: \"center\"\n  };\n  worksheet.getCell(\"I7\").value = \"-\";\n  worksheet.getCell(\"I7\").alignment = {\n    horizontal: \"center\"\n  };\n\n  // Bolding and Styling font for the date periods\n  const cellRanges = [\"B3\", \"B4\", \"B5\", \"C3\", \"C4\", \"C5\", \"D3\", \"D4\", \"D5\", \"E3\", \"E4\", \"E5\", \"F3\", \"F4\", \"F5\", \"G3\", \"G4\", \"G5\", \"H3\", \"H4\", \"H5\"];\n  const fontConfig = {\n    name: \"Times New Roman\",\n    bold: true\n  };\n  cellRanges.forEach(cellRange => {\n    worksheet.getCell(cellRange).font = fontConfig;\n  });\n\n  // Adjust column width\n  worksheet.getColumn(\"A\").width = 30;\n  worksheet.getColumn(\"B\").width = 13;\n  worksheet.getColumn(\"C\").width = 13;\n  worksheet.getColumn(\"D\").width = 13;\n  worksheet.getColumn(\"E\").width = 13;\n  worksheet.getColumn(\"F\").width = 13;\n  worksheet.getColumn(\"G\").width = 13;\n  worksheet.getColumn(\"H\").width = 13;\n  worksheet.getColumn(\"I\").width = 13;\n}\nexport { styleThirdReport };","map":{"version":3,"names":["headerTitle","styleThirdReport","worksheet","greyColor","borderMedium","style","color","argb","headers","fillPattern","type","pattern","fgColor","forEach","col","row","getCell","fill","cell","startRow","header","value","font","name","bold","specificBorders","A2","A3","A4","A5","A6","A11","A12","I6","I11","I12","I2","B2","C2","D2","E2","F2","G2","H2","Object","entries","borders","currentCell","border","top","left","right","bottom","mergeCells","alignment","horizontal","vertical","cellRanges","fontConfig","cellRange","getColumn","width"],"sources":["/Users/caizhitan/BCM_Reports/src/Pages/Admin/Reports/ThirdReport/ExcelStylesUtil.js"],"sourcesContent":["import headerTitle from \"./ExcelHeaders\";\n\n//====For styling Contract Variation Cost Excel====//\nfunction styleThirdReport(worksheet) {\n  const greyColor = \"d9d9d9\";\n  const borderMedium = { style: \"medium\", color: { argb: \"000000\" } };\n  const headers = headerTitle();\n  const fillPattern = {\n    type: \"pattern\",\n    pattern: \"solid\",\n    fgColor: { argb: greyColor },\n  };\n\n  // Apply grey color\n  [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"].forEach((col) => {\n    for (let row = 2; row <= 5; row++) {\n      worksheet.getCell(`${col}${row}`).fill = fillPattern;\n    }\n  });\n  [\"A11\", \"A12\"].forEach((cell) => {\n    worksheet.getCell(cell).fill = fillPattern;\n  });\n\n  // Apply Styling for headers and all cells\n  let startRow = 6;\n  headers.forEach((header) => {\n    let cell = worksheet.getCell(`A${startRow}`);\n    cell.value = header;\n    cell.font = { name: \"Times New Roman\", bold: true };\n    startRow++;\n  });\n\n  // Define borders\n  const specificBorders = {\n    A2: [\"top\", \"left\", \"right\"],\n    A3: [\"left\", \"right\"],\n    A4: [\"left\", \"right\"],\n    A5: [\"left\", \"right\", \"bottom\"],\n    A6: [\"top\", \"left\", \"right\", \"bottom\"],\n    A11: [\"top\", \"left\", \"right\", \"bottom\"],\n    A12: [\"top\", \"left\", \"right\", \"bottom\"],\n    I6: [\"top\", \"left\", \"right\", \"bottom\"],\n    I11: [\"top\", \"left\", \"right\", \"bottom\"],\n    I12: [\"top\", \"left\", \"right\", \"bottom\"],\n    I2: [\"top\", \"left\", \"right\", \"bottom\"],\n    B2: [\"top\", \"left\", \"right\", \"bottom\"],\n    C2: [\"top\", \"left\", \"right\", \"bottom\"],\n    D2: [\"top\", \"left\", \"right\", \"bottom\"],\n    E2: [\"top\", \"left\", \"right\", \"bottom\"],\n    F2: [\"top\", \"left\", \"right\", \"bottom\"],\n    G2: [\"top\", \"left\", \"right\", \"bottom\"],\n    H2: [\"top\", \"left\", \"right\", \"bottom\"],\n  };\n\n  Object.entries(specificBorders).forEach(([cell, borders]) => {\n    const currentCell = worksheet.getCell(cell);\n    borders.forEach((border) => {\n      if (!currentCell.border) currentCell.border = {};\n      currentCell.border[border] = borderMedium;\n    });\n  });\n\n  // Apply borders for date boxes\n  [\"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"].forEach((col) => {\n    worksheet.getCell(`${col}3`).border = {\n      top: borderMedium,\n      left: borderMedium,\n      right: borderMedium,\n    };\n    worksheet.getCell(`${col}4`).border = {\n      left: borderMedium,\n      right: borderMedium,\n    };\n    worksheet.getCell(`${col}5`).border = {\n      left: borderMedium,\n      right: borderMedium,\n      bottom: borderMedium,\n    };\n  });\n\n  // Apply full borders\n  [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"].forEach((col) => {\n    for (let row = 7; row <= 10; row++) {\n      worksheet.getCell(`${col}${row}`).border = {\n        top: borderMedium,\n        left: borderMedium,\n        right: borderMedium,\n        bottom: borderMedium,\n      };\n    }\n  });\n\n  //Merge cells\n  worksheet.mergeCells(\"I2:I5\");\n  worksheet.getCell(\"I2\").alignment = {\n    horizontal: \"center\",\n    vertical: \"middle\",\n  };\n  worksheet.getCell(\"I2\").value = \"Total\";\n  worksheet.getCell(\"I2\").font = { name: \"Times New Roman\", bold: true };\n  worksheet.mergeCells(\"B6:H6\");\n  worksheet.getCell(\"B6\").alignment = { horizontal: \"center\" };\n  worksheet.getCell(\"B6\").value = \"2% per annum\";\n  worksheet.getCell(\"B6\").font = { name: \"Times New Roman\" };\n  worksheet.mergeCells(\"A11:H11\");\n  worksheet.getCell(\"A11\").alignment = { horizontal: \"right\" };\n  worksheet.mergeCells(\"A12:H12\");\n  worksheet.getCell(\"A12\").alignment = { horizontal: \"right\" };\n\n  // Adding \"-\" for Cell I6 & I7\n  worksheet.getCell(\"I6\").value = \"-\";\n  worksheet.getCell(\"I6\").alignment = { horizontal: \"center\" };\n  worksheet.getCell(\"I7\").value = \"-\";\n  worksheet.getCell(\"I7\").alignment = { horizontal: \"center\" };\n\n  // Bolding and Styling font for the date periods\n  const cellRanges = [\n    \"B3\",\n    \"B4\",\n    \"B5\",\n    \"C3\",\n    \"C4\",\n    \"C5\",\n    \"D3\",\n    \"D4\",\n    \"D5\",\n    \"E3\",\n    \"E4\",\n    \"E5\",\n    \"F3\",\n    \"F4\",\n    \"F5\",\n    \"G3\",\n    \"G4\",\n    \"G5\",\n    \"H3\",\n    \"H4\",\n    \"H5\",\n  ];\n\n  const fontConfig = { name: \"Times New Roman\", bold: true };\n\n  cellRanges.forEach((cellRange) => {\n    worksheet.getCell(cellRange).font = fontConfig;\n  });\n\n  // Adjust column width\n  worksheet.getColumn(\"A\").width = 30;\n  worksheet.getColumn(\"B\").width = 13;\n  worksheet.getColumn(\"C\").width = 13;\n  worksheet.getColumn(\"D\").width = 13;\n  worksheet.getColumn(\"E\").width = 13;\n  worksheet.getColumn(\"F\").width = 13;\n  worksheet.getColumn(\"G\").width = 13;\n  worksheet.getColumn(\"H\").width = 13;\n  worksheet.getColumn(\"I\").width = 13;\n}\n\nexport { styleThirdReport };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}