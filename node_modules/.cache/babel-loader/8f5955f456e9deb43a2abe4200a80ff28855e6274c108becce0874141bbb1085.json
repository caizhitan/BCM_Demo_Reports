{"ast":null,"code":"var _jsxFileName = \"/Users/caizhitan/BCM_Reports/src/Pages/Admin/Excel.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect, Button, useCallback } from \"react\";\nimport ExcelJS from \"exceljs/dist/exceljs.min.js\"; // Import ExcelJS\nimport saveAs from \"file-saver\";\nimport { variationNumber, variationName } from \"./DummyData\";\nimport DownloadButton from \"../../../../src/components/Button/DownloadButton\";\nimport \"./styles.css\";\nimport { findServiceData, additionalMileage, frequencyByDayType, leaseFeeDetails, FirstReportData, totalFirstReportData } from \"./FirstReport/FirstReportData\";\nimport { colourMap, styleFirstReport } from \"./FirstReport/ExcelStylesUtil\";\nimport { findContractHeader } from \"./SecondReport/ExcelHeaders\";\nimport { findContractData, SecondReportData, totalSecondReportData } from \"./SecondReport/SecondReportData\";\nimport { colourMap2, styleSecondReport } from \"./SecondReport/ExcelStylesUtil\";\nimport { ThirdReportData, totalThirdReportData } from \"./ThirdReport/ThirdReportData\";\nimport { styleThirdReport } from \"./ThirdReport/ExcelStylesUtil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function VariationSummaryButton({\n  selectedService\n}) {\n  _s();\n  const number = variationNumber;\n  const selectedFirstReportData = findServiceData(FirstReportData, selectedService);\n  const selectedFrequencyByDayType = findServiceData(frequencyByDayType, selectedService);\n  const selectedAdditionalMileage = findServiceData(additionalMileage, selectedService);\n  const selectedLeaseFeeDetails = findServiceData(leaseFeeDetails, selectedService, true);\n  const selectedTotalData = findServiceData(totalFirstReportData, selectedService);\n\n  // To view selected service data (Feel free to delete after Report #1 is complete)\n  useEffect(() => {\n    const dataTypes = [{\n      label: \"Additional Mileage\",\n      data: selectedAdditionalMileage\n    }, {\n      label: \"Frequency By Day Type\",\n      data: selectedFrequencyByDayType\n    }, {\n      label: \"FirstReportData\",\n      data: selectedFirstReportData\n    }, {\n      label: \"leaseFee\",\n      data: selectedLeaseFeeDetails\n    }, {\n      label: \"First Report Total Data\",\n      data: selectedTotalData\n    }];\n    const logData = (label, data) => {\n      if (data) {\n        console.log(`muh selected service ${selectedService} ${label}:`, data);\n      } else {\n        console.log(\"No data found:\", selectedService);\n      }\n    };\n    dataTypes.forEach(({\n      label,\n      data\n    }) => logData(label, data));\n  }, [selectedFirstReportData, selectedFrequencyByDayType, selectedAdditionalMileage, selectedLeaseFeeDetails, selectedTotalData, selectedService]);\n  const exportVS = useCallback(async () => {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(\"Variation Summ_Svc+Fuel+Lease\");\n\n    // Inputting Route Difference Data\n    const routeDifferenceColumn = 2; // Column B\n    const routeDifferenceRow = 6; // Row 6\n    selectedAdditionalMileage.forEach((value, index) => {\n      const rowNumber = routeDifferenceRow + index;\n      const cell = worksheet.getCell(rowNumber, routeDifferenceColumn);\n      const numericValue = parseFloat(value); // Convert String into Float\n      cell.value = numericValue;\n      cell.alignment = {\n        horizontal: \"center\"\n      };\n      cell.numFmt = \"#,##0.00\";\n      cell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n          argb: \"FCFC04\"\n        }\n      };\n    });\n\n    // Inputting First Report Data and Trip Count Data\n    selectedFirstReportData.forEach((entry, entryIndex) => {\n      const firstReportCells = [{\n        row: 13,\n        value: entry.endYear,\n        numFmt: \"0\"\n      }, {\n        row: 14,\n        value: entry.dateStart,\n        Colour: \"Yellow\"\n      }, {\n        row: 15,\n        value: entry.dateEnd,\n        Colour: \"Yellow\"\n      }, {\n        row: 22,\n        value: entry.mileage,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }, {\n        row: 23,\n        value: entry.unitRate,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }, {\n        row: 24,\n        value: entry.YearlySF,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }, {\n        row: 25,\n        value: entry.fuelRate,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }, {\n        row: 26,\n        value: entry.fuelCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }, {\n        row: 27,\n        value: entry.UnitRFuelR,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }, {\n        row: 28,\n        value: entry.sfCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }, {\n        row: 29,\n        value: entry.dateDiff,\n        numFmt: \"#,##0.00\",\n        Colour: \"Grey\"\n      }, {\n        row: 30,\n        value: entry.leaseFee,\n        numFmt: \"#,##0.00\",\n        Colour: \"Grey\"\n      }, {\n        row: 31,\n        value: entry.totalCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\"\n      }];\n      firstReportCells.forEach(cellInfo => {\n        const cell = worksheet.getCell(cellInfo.row, entryIndex + 2);\n        worksheet.getColumn(entryIndex + 2).width = 21;\n        let cellValue = cellInfo.numFmt ? parseFloat(cellInfo.value) : cellInfo.value;\n        cell.value = cellValue;\n        cell.alignment = {\n          horizontal: \"center\"\n        };\n        if (cellInfo.numFmt) {\n          cell.numFmt = cellInfo.numFmt;\n        }\n        // Apply colour styling\n        if (cellInfo.Colour && colourMap[cellInfo.Colour]) {\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n              argb: colourMap[cellInfo.Colour]\n            }\n          };\n        }\n      });\n\n      // Inputting Frequency of Day Type Data in the same column as FirstReportData\n      if (selectedFrequencyByDayType[entryIndex]) {\n        const values = JSON.parse(selectedFrequencyByDayType[entryIndex]);\n        values.forEach((value, rowIndex) => {\n          const cell = worksheet.getCell(rowIndex + 16, entryIndex + 2);\n          cell.value = value;\n          cell.alignment = {\n            horizontal: \"center\"\n          };\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n              argb: colourMap.Yellow\n            }\n          };\n        });\n      }\n    });\n    const totalDataColumnIndex = selectedFirstReportData.length + 2; // Adjust if needed, to make TotalData Column Dynamic.\n\n    // Inputting Total Data\n    const totalDataCells = [{\n      row: 13,\n      value: \"Total\",\n      Colour: \"Orange\"\n    }, {\n      row: 14,\n      value: \"-\",\n      Colour: \"Orange\"\n    }, {\n      row: 15,\n      value: \"-\",\n      Colour: \"Orange\"\n    }, {\n      row: 16,\n      value: selectedTotalData.MonToThurs,\n      Colour: \"Orange\"\n    }, {\n      row: 17,\n      value: selectedTotalData.Friday,\n      Colour: \"Orange\"\n    }, {\n      row: 18,\n      value: selectedTotalData.Saturdays,\n      Colour: \"Orange\"\n    }, {\n      row: 19,\n      value: selectedTotalData.Sundays,\n      Colour: \"Orange\"\n    }, {\n      row: 20,\n      value: selectedTotalData.SchHoliday,\n      Colour: \"Orange\"\n    }, {\n      row: 21,\n      value: selectedTotalData.Others,\n      Colour: \"Orange\"\n    }, {\n      row: 22,\n      value: selectedTotalData.totalMileage,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 23,\n      value: \"-\",\n      Colour: \"Orange\"\n    }, {\n      row: 24,\n      value: selectedTotalData.totalYearlySF,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 25,\n      value: \"-\",\n      Colour: \"Orange\"\n    }, {\n      row: 26,\n      value: selectedTotalData.totalFuelCost,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 27,\n      value: \"-\",\n      Colour: \"Orange\"\n    }, {\n      row: 28,\n      value: selectedTotalData.totalSfCost,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 29,\n      value: \"\",\n      Colour: \"Grey\"\n    }, {\n      row: 30,\n      value: \"\",\n      Colour: \"Grey\"\n    }, {\n      row: 31,\n      value: selectedTotalData.totalCost,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }];\n\n    // Apply Total Data values into respective cells\n    totalDataCells.forEach(cellInfo => {\n      const cell = worksheet.getCell(cellInfo.row, totalDataColumnIndex);\n      worksheet.getColumn(totalDataColumnIndex).width = 21;\n      let cellValue = cellInfo.numFmt ? parseFloat(cellInfo.value) : cellInfo.value;\n      cell.value = cellValue;\n      cell.alignment = {\n        horizontal: \"center\"\n      };\n      if (cellInfo.numFmt) {\n        cell.numFmt = cellInfo.numFmt;\n      }\n      // Apply colour styling\n      if (cellInfo.Colour) {\n        cell.fill = {\n          type: \"pattern\",\n          pattern: \"solid\",\n          fgColor: {\n            argb: colourMap[cellInfo.Colour]\n          }\n        };\n      }\n    });\n    const colBTotalDataCells = [{\n      row: 32,\n      value: selectedTotalData.totalAmountReq,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 34,\n      value: selectedTotalData.annualMileage,\n      numFmt: \"#,##0.00\",\n      Colour: \"Yellow\"\n    }, {\n      row: 35,\n      value: selectedTotalData.annualSF,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 36,\n      value: selectedTotalData.annualLF,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 37,\n      value: selectedTotalData.annualCost,\n      numFmt: \"#,##0.00\",\n      Colour: \"Orange\"\n    }, {\n      row: 38,\n      value: selectedTotalData.voStartDate,\n      Colour: \"Orange\"\n    }, {\n      row: 39,\n      value: selectedTotalData.voEndDate,\n      Colour: \"Orange\"\n    }, {\n      row: 40,\n      value: selectedTotalData.annualCostCrr,\n      numFmt: \"#,##0.00\"\n    }];\n    colBTotalDataCells.forEach(cellInfo => {\n      const cell = worksheet.getCell(cellInfo.row, 2); // Always Column B\n      worksheet.getColumn(2).width = 21;\n      let cellValue = cellInfo.numFmt && !isNaN(parseFloat(cellInfo.value)) ? parseFloat(cellInfo.value) : cellInfo.value;\n      cell.value = cellValue;\n      if (cellInfo.numFmt && !isNaN(cellValue)) {\n        cell.numFmt = cellInfo.numFmt;\n      }\n      cell.alignment = {\n        horizontal: \"center\"\n      };\n      // Apply colour styling\n      if (cellInfo.Colour) {\n        cell.fill = {\n          type: \"pattern\",\n          pattern: \"solid\",\n          fgColor: {\n            argb: colourMap[cellInfo.Colour]\n          }\n        };\n      }\n    });\n\n    // Inputting Lease Fee Details\n    // If statement to support 'onlyContract=true' scenarios\n    if (selectedLeaseFeeDetails != null) {\n      // Title: Lease Fee Details\n      worksheet.mergeCells(\"D34:G34\");\n      worksheet.getCell(\"D34\").alignment = {\n        horizontal: \"center\"\n      };\n      worksheet.getCell(\"D34\").value = \"Lease Fee Details\";\n\n      // Setting up our headers\n      const headers = [\"Transaction\", \"Handover/Return Date\", \"No. of Buses\", \"Unit Cost\"];\n      const startRow = 35,\n        startCol = 4;\n\n      // Function to set cell style\n      const setCellStyle = (cell, align, fill, isNumber = false) => {\n        cell.alignment = {\n          horizontal: align\n        };\n        if (isNumber) cell.numFmt = \"#,##0.00\";\n        if (fill) cell.fill = {\n          type: \"pattern\",\n          pattern: \"solid\",\n          fgColor: {\n            argb: fill\n          }\n        };\n      };\n\n      // Write headers\n      headers.forEach((header, i) => {\n        let cell = worksheet.getCell(startRow, startCol + i);\n        cell.value = header;\n        setCellStyle(cell, \"center\");\n        worksheet.getColumn(startCol + i).width = 21;\n      });\n\n      // Write transaction data\n      selectedLeaseFeeDetails.transactions.forEach((tr, rIdx) => {\n        headers.forEach((header, hIdx) => {\n          let cell = worksheet.getCell(startRow + rIdx + 1, startCol + hIdx);\n          if (header === \"Unit Cost\") {\n            cell.value = parseFloat(tr[header]);\n            setCellStyle(cell, \"center\", colourMap.Yellow, true);\n          } else {\n            cell.value = tr[header];\n            setCellStyle(cell, \"center\", header !== \"Transaction\" ? colourMap.Yellow : null);\n          }\n        });\n      });\n\n      // Write total\n      let totalRow = startRow + selectedLeaseFeeDetails.transactions.length + 1;\n      worksheet.getCell(totalRow, startCol).value = \"Total LF per month\";\n      setCellStyle(worksheet.getCell(totalRow, startCol), \"right\");\n      let totalCell = worksheet.getCell(totalRow, startCol + 3);\n      totalCell.value = parseFloat(selectedLeaseFeeDetails.grandTotal);\n      setCellStyle(totalCell, \"center\", colourMap.Orange, true);\n    }\n    // Apply styles to entire Report\n    styleFirstReport(worksheet);\n    try {\n      const buffer = await workbook.xlsx.writeBuffer();\n      console.log(\"ia a buffer\", buffer);\n      const blob = new Blob([buffer], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n      });\n      saveAs(blob, `${number}_VS.xlsx`);\n    } catch (error) {\n      console.error(\"There was an error generating the Excel buffer:\", error);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(DownloadButton, {\n    onClick: exportVS,\n    label: \"Variation Summary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 10\n  }, this);\n}\n_s(VariationSummaryButton, \"9y4yTIUjfbqdMTYYhF+v8gLb0rE=\");\n_c = VariationSummaryButton;\nexport function ServiceMileageButton({\n  selectedContract\n}) {\n  _s2();\n  const selectedHeaders = findContractHeader(selectedContract);\n  const selectedData = findContractData(SecondReportData, selectedContract);\n  const selectedTotalData = findContractData(totalSecondReportData, selectedContract);\n\n  //To view selected contract datas, feel free to delete when not needed.\n  // useEffect(() => {\n  //   const dataTypes = [\n  //     { label: \"Second Report Dates\", data: selectedHeaders },\n  //     { label: \"Second Report Data\", data: selectedData },\n  //     { label: \"Total Second Report Data\", data: selectedTotalData },\n  //   ];\n\n  //   const logData = (label, data) => {\n  //     if (data) {\n  //       console.log(\n  //         `muh selected contract ${selectedContract} ${label}:`,\n  //         data\n  //       );\n  //     } else {\n  //       console.log(\"No data found:\", selectedContract);\n  //     }\n  //   };\n\n  //   dataTypes.forEach(({ label, data }) => logData(label, data));\n  // }, [selectedHeaders, selectedData, selectedTotalData, selectedContract]);\n\n  const exportSMCS = useCallback(async () => {\n    const name = variationName;\n    const number = variationNumber;\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(\"Service Mileage & Cost Summary\");\n\n    // Inputting Report #2 Headers\n    const headersColumn = \"B\"; // Column B\n    let headersRow = 4; // Starting from row 4\n    selectedHeaders.forEach(header => {\n      worksheet.getColumn(headersColumn).width = 34;\n      const cellAddress = `${headersColumn}${headersRow}`;\n      const cell = worksheet.getCell(cellAddress);\n      cell.value = header;\n      cell.font = {\n        bold: true\n      };\n      cell.alignment = {\n        wrapText: header.includes(\"\\n\"),\n        vertical: \"middle\",\n        horizontal: headersRow === 4 ? \"center\" : undefined // Centering Text for \"Description\" header Only\n      };\n      let fillColor;\n      if (headersRow === 4) {\n        fillColor = colourMap2.Darkblue;\n        cell.font.color = {\n          argb: \"FFFFFF\"\n        };\n      } else if ([5, 9, 10].includes(headersRow)) {\n        fillColor = colourMap2.Blue;\n      } else {\n        fillColor = colourMap2.Lightblue;\n      }\n      cell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n          argb: fillColor\n        }\n      };\n      headersRow++;\n    });\n\n    // Inputting Report #2 Data\n    const keys = Object.keys(selectedData);\n    keys.forEach((key, index) => {\n      const columnIndex = index + 3; // +3 Because Column C is our first value placement. Adjust if needed.\n      // Inputing the Service Number in Row 4\n      const serviceNoCell = worksheet.getCell(4, columnIndex);\n      serviceNoCell.value = `Service ${key}`;\n      serviceNoCell.alignment = {\n        horizontal: \"center\"\n      };\n      serviceNoCell.font = {\n        color: {\n          argb: \"FFFFFF\"\n        }\n      };\n      serviceNoCell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n          argb: \"4472c4\"\n        }\n      };\n      // Inputting the Report #2 Data values\n      const entry = selectedData[key];\n      const reportCells = [{\n        row: 5,\n        value: entry.annualMileage,\n        numFmt: \"#,##0.00\",\n        Colour: \"Blue\"\n      }, {\n        row: 6,\n        value: entry.annualSF,\n        numFmt: \"#,##0.00\",\n        Colour: \"Lightblue\"\n      }, {\n        row: 7,\n        value: entry.annualLF,\n        numFmt: \"#,##0.00\",\n        Colour: \"Lightblue\"\n      }, {\n        row: 8,\n        value: entry.annualCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Lightblue\"\n      }, {\n        row: 9,\n        value: entry.totalCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Blue\"\n      }, {\n        row: 10,\n        value: entry.totalAmountReq,\n        numFmt: \"#,##0.00\",\n        Colour: \"Blue\"\n      }];\n      reportCells.forEach(cellInfo => {\n        const cell = worksheet.getCell(cellInfo.row, columnIndex);\n        worksheet.getColumn(columnIndex).width = 34;\n        let cellValue = cellInfo.numFmt ? parseFloat(cellInfo.value) : cellInfo.value;\n        cell.value = cellValue;\n        cell.alignment = {\n          horizontal: \"center\"\n        };\n        if (cellInfo.numFmt) {\n          cell.numFmt = cellInfo.numFmt;\n        }\n        if (cellInfo.Colour) {\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n              argb: colourMap2[cellInfo.Colour]\n            }\n          };\n        }\n      });\n      const totalDataColumnIndex = keys.length + 3; // To make Total Column Dynamic with Data Cell Columns\n      const totalDataCells = [{\n        row: 5,\n        value: selectedTotalData.annualMileageOverall,\n        numFmt: \"#,##0.00\",\n        Colour: \"Lightblue\"\n      }, {\n        row: 6,\n        value: selectedTotalData.annualSFOverall,\n        numFmt: \"#,##0.00\"\n      }, {\n        row: 7,\n        value: selectedTotalData.annualLFOverall,\n        numFmt: \"#,##0.00\",\n        Colour: \"Lightblue\"\n      }, {\n        row: 8,\n        value: selectedTotalData.annualCostOverall,\n        numFmt: \"#,##0.00\",\n        Colour: \"Lightblue\"\n      }, {\n        row: 9,\n        value: selectedTotalData.totalCostOverall,\n        numFmt: \"#,##0.00\",\n        Colour: \"Lightblue\"\n      }, {\n        row: 10,\n        value: selectedTotalData.totalAmountReqOverall,\n        numFmt: \"#,##0.00\",\n        Colour: \"Blue\"\n      }];\n      const totalCell = worksheet.getCell(4, totalDataColumnIndex);\n      totalCell.value = \"Total\";\n      totalCell.alignment = {\n        horizontal: \"center\"\n      };\n      totalCell.font = {\n        color: {\n          argb: \"FFFFFF\"\n        }\n      };\n      totalCell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n          argb: \"4472c4\"\n        }\n      };\n      totalDataCells.forEach(cellInfo => {\n        const cell = worksheet.getCell(cellInfo.row, totalDataColumnIndex);\n        worksheet.getColumn(totalDataColumnIndex).width = 34;\n        let cellValue = cellInfo.numFmt ? parseFloat(cellInfo.value) : cellInfo.value;\n        cell.value = cellValue;\n        cell.alignment = {\n          horizontal: \"center\"\n        };\n        if (cellInfo.numFmt) {\n          cell.numFmt = cellInfo.numFmt;\n        }\n        if (cellInfo.Colour) {\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n              argb: colourMap2[cellInfo.Colour]\n            }\n          };\n        }\n      });\n    });\n\n    // Variation Description (Service Variation Serial No.)\n    worksheet.getCell(\"B2\").value = `${name} (${number})`;\n\n    //Applying Styles to entire Excel\n    styleSecondReport(worksheet);\n    try {\n      const buffer = await workbook.xlsx.writeBuffer();\n      console.log(\"Buffer created:\", buffer);\n      const blob = new Blob([buffer], {\n        type: \"application/octet-stream\"\n      });\n      saveAs(blob, `${number}_SMCS.xlsx`);\n    } catch (error) {\n      console.error(\"Failed to download the spreadsheet:\", error);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(DownloadButton, {\n    onClick: () => exportSMCS(selectedContract),\n    label: \"Service Mileage and Cost Summary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 623,\n    columnNumber: 5\n  }, this);\n}\n_s2(ServiceMileageButton, \"pxETftkFMiHQ+9BatzVzddjKyDE=\");\n_c2 = ServiceMileageButton;\nexport function ContractVariationButton({\n  selectedContract1\n}) {\n  _s3();\n  const exportCVCS = useCallback(async selectedContract1 => {\n    const number = variationNumber;\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(\"Contract Variation Cost Summary\");\n    const selectedContractData = ThirdReportData[selectedContract1];\n    console.log(`muh data for contract ${selectedContract1}:`, selectedContractData);\n    const selectedTotalContractData = totalThirdReportData[selectedContract1];\n    console.log(`muh data for contract ${selectedContract1}:`, selectedTotalContractData);\n\n    // Inputting ThirdReportData\n    selectedContractData.forEach((entry, entryIndex) => {\n      const cellsToFormat = [{\n        row: 3,\n        value: entry.reportStartDate\n      }, {\n        row: 4,\n        value: \"to\"\n      }, {\n        row: 5,\n        value: entry.reportEndDate\n      }, {\n        row: 7,\n        value: Number(entry.unitRate)\n      }, {\n        row: 8,\n        value: Number(entry.totalMileage)\n      }, {\n        row: 9,\n        value: Number(entry.totalSF)\n      }, {\n        row: 10,\n        value: Number(entry.totalLF)\n      }];\n      cellsToFormat.forEach(cellInfo => {\n        const cell = worksheet.getCell(cellInfo.row, entryIndex + 2);\n        cell.value = cellInfo.value;\n        if (cellInfo.row > 6) {\n          cell.numFmt = \"#,##0.00\";\n        }\n        cell.alignment = {\n          horizontal: \"center\"\n        };\n      });\n    });\n\n    // Inputting Total Data\n    const totalDataMappings = [{\n      row: 8,\n      value: selectedTotalContractData.totalMileage\n    }, {\n      row: 9,\n      value: selectedTotalContractData.totalServiceFee\n    }, {\n      row: 10,\n      value: selectedTotalContractData.totalLeaseFee\n    }, {\n      row: 11,\n      value: selectedTotalContractData.grandTotal\n    }, {\n      row: 12,\n      value: selectedTotalContractData.aboutTotal\n    }];\n    totalDataMappings.forEach(({\n      row,\n      value\n    }) => {\n      const cell = worksheet.getCell(`I${row}`);\n      cell.value = Number(value);\n      cell.numFmt = \"#,##0.00\";\n      cell.alignment = {\n        horizontal: \"center\"\n      };\n    });\n\n    // Style Report #3\n    styleThirdReport(worksheet);\n    try {\n      const buffer = await workbook.xlsx.writeBuffer();\n      console.log(\"Buffer created:\", buffer);\n      const blob = new Blob([buffer], {\n        type: \"application/octet-stream\"\n      });\n      saveAs(blob, `${number}_CVCS.xlsx`);\n    } catch (error) {\n      console.error(\"Failed to download the spreadsheet:\", error);\n    }\n  }, [selectedContract1]);\n  return /*#__PURE__*/_jsxDEV(DownloadButton, {\n    onClick: () => exportCVCS(selectedContract1),\n    label: \"Contract Variation Cost Summary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 702,\n    columnNumber: 5\n  }, this);\n}\n_s3(ContractVariationButton, \"MPZd9Pde4G4ksek1tJ+rZM241fg=\");\n_c3 = ContractVariationButton;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"VariationSummaryButton\");\n$RefreshReg$(_c2, \"ServiceMileageButton\");\n$RefreshReg$(_c3, \"ContractVariationButton\");","map":{"version":3,"names":["React","useEffect","Button","useCallback","ExcelJS","saveAs","variationNumber","variationName","DownloadButton","findServiceData","additionalMileage","frequencyByDayType","leaseFeeDetails","FirstReportData","totalFirstReportData","colourMap","styleFirstReport","findContractHeader","findContractData","SecondReportData","totalSecondReportData","colourMap2","styleSecondReport","ThirdReportData","totalThirdReportData","styleThirdReport","jsxDEV","_jsxDEV","VariationSummaryButton","selectedService","_s","number","selectedFirstReportData","selectedFrequencyByDayType","selectedAdditionalMileage","selectedLeaseFeeDetails","selectedTotalData","dataTypes","label","data","logData","console","log","forEach","exportVS","workbook","Workbook","worksheet","addWorksheet","routeDifferenceColumn","routeDifferenceRow","value","index","rowNumber","cell","getCell","numericValue","parseFloat","alignment","horizontal","numFmt","fill","type","pattern","fgColor","argb","entry","entryIndex","firstReportCells","row","endYear","dateStart","Colour","dateEnd","mileage","unitRate","YearlySF","fuelRate","fuelCost","UnitRFuelR","sfCost","dateDiff","leaseFee","totalCost","cellInfo","getColumn","width","cellValue","values","JSON","parse","rowIndex","Yellow","totalDataColumnIndex","length","totalDataCells","MonToThurs","Friday","Saturdays","Sundays","SchHoliday","Others","totalMileage","totalYearlySF","totalFuelCost","totalSfCost","colBTotalDataCells","totalAmountReq","annualMileage","annualSF","annualLF","annualCost","voStartDate","voEndDate","annualCostCrr","isNaN","mergeCells","headers","startRow","startCol","setCellStyle","align","isNumber","header","i","transactions","tr","rIdx","hIdx","totalRow","totalCell","grandTotal","Orange","buffer","xlsx","writeBuffer","blob","Blob","error","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","ServiceMileageButton","selectedContract","_s2","selectedHeaders","selectedData","exportSMCS","name","headersColumn","headersRow","cellAddress","font","bold","wrapText","includes","vertical","undefined","fillColor","Darkblue","color","Blue","Lightblue","keys","Object","key","columnIndex","serviceNoCell","reportCells","annualMileageOverall","annualSFOverall","annualLFOverall","annualCostOverall","totalCostOverall","totalAmountReqOverall","_c2","ContractVariationButton","selectedContract1","_s3","exportCVCS","selectedContractData","selectedTotalContractData","cellsToFormat","reportStartDate","reportEndDate","Number","totalSF","totalLF","totalDataMappings","totalServiceFee","totalLeaseFee","aboutTotal","_c3","$RefreshReg$"],"sources":["/Users/caizhitan/BCM_Reports/src/Pages/Admin/Excel.js"],"sourcesContent":["import React, { useEffect, Button, useCallback } from \"react\";\nimport ExcelJS from \"exceljs/dist/exceljs.min.js\"; // Import ExcelJS\nimport saveAs from \"file-saver\";\nimport { variationNumber, variationName } from \"./DummyData\";\nimport DownloadButton from \"../../../../src/components/Button/DownloadButton\";\nimport \"./styles.css\";\n\nimport {\n  findServiceData,\n  additionalMileage,\n  frequencyByDayType,\n  leaseFeeDetails,\n  FirstReportData,\n  totalFirstReportData,\n} from \"./FirstReport/FirstReportData\";\nimport { colourMap, styleFirstReport } from \"./FirstReport/ExcelStylesUtil\";\n\nimport { findContractHeader } from \"./SecondReport/ExcelHeaders\";\nimport {\n  findContractData,\n  SecondReportData,\n  totalSecondReportData,\n} from \"./SecondReport/SecondReportData\";\nimport { colourMap2, styleSecondReport } from \"./SecondReport/ExcelStylesUtil\";\n\nimport {\n  ThirdReportData,\n  totalThirdReportData,\n} from \"./ThirdReport/ThirdReportData\";\nimport { styleThirdReport } from \"./ThirdReport/ExcelStylesUtil\";\n\nexport function VariationSummaryButton({ selectedService }) {\n  const number = variationNumber;\n  const selectedFirstReportData = findServiceData(\n    FirstReportData,\n    selectedService\n  );\n  const selectedFrequencyByDayType = findServiceData(\n    frequencyByDayType,\n    selectedService\n  );\n  const selectedAdditionalMileage = findServiceData(\n    additionalMileage,\n    selectedService\n  );\n  const selectedLeaseFeeDetails = findServiceData(\n    leaseFeeDetails,\n    selectedService,\n    true\n  );\n  const selectedTotalData = findServiceData(\n    totalFirstReportData,\n    selectedService\n  );\n\n  // To view selected service data (Feel free to delete after Report #1 is complete)\n  useEffect(() => {\n    const dataTypes = [\n      { label: \"Additional Mileage\", data: selectedAdditionalMileage },\n      { label: \"Frequency By Day Type\", data: selectedFrequencyByDayType },\n      { label: \"FirstReportData\", data: selectedFirstReportData },\n      { label: \"leaseFee\", data: selectedLeaseFeeDetails },\n      { label: \"First Report Total Data\", data: selectedTotalData },\n    ];\n\n    const logData = (label, data) => {\n      if (data) {\n        console.log(`muh selected service ${selectedService} ${label}:`, data);\n      } else {\n        console.log(\"No data found:\", selectedService);\n      }\n    };\n\n    dataTypes.forEach(({ label, data }) => logData(label, data));\n  }, [\n    selectedFirstReportData,\n    selectedFrequencyByDayType,\n    selectedAdditionalMileage,\n    selectedLeaseFeeDetails,\n    selectedTotalData,\n    selectedService,\n  ]);\n\n  const exportVS = useCallback(async () => {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(\"Variation Summ_Svc+Fuel+Lease\");\n\n    // Inputting Route Difference Data\n    const routeDifferenceColumn = 2; // Column B\n    const routeDifferenceRow = 6; // Row 6\n    selectedAdditionalMileage.forEach((value, index) => {\n      const rowNumber = routeDifferenceRow + index;\n      const cell = worksheet.getCell(rowNumber, routeDifferenceColumn);\n      const numericValue = parseFloat(value); // Convert String into Float\n      cell.value = numericValue;\n      cell.alignment = { horizontal: \"center\" };\n      cell.numFmt = \"#,##0.00\";\n      cell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: \"FCFC04\" },\n      };\n    });\n\n    // Inputting First Report Data and Trip Count Data\n    selectedFirstReportData.forEach((entry, entryIndex) => {\n      const firstReportCells = [\n        { row: 13, value: entry.endYear, numFmt: \"0\" },\n        { row: 14, value: entry.dateStart, Colour: \"Yellow\" },\n        { row: 15, value: entry.dateEnd, Colour: \"Yellow\" },\n        { row: 22, value: entry.mileage, numFmt: \"#,##0.00\", Colour: \"Orange\" },\n        {\n          row: 23,\n          value: entry.unitRate,\n          numFmt: \"#,##0.00\",\n          Colour: \"Orange\",\n        },\n        {\n          row: 24,\n          value: entry.YearlySF,\n          numFmt: \"#,##0.00\",\n          Colour: \"Orange\",\n        },\n        {\n          row: 25,\n          value: entry.fuelRate,\n          numFmt: \"#,##0.00\",\n          Colour: \"Orange\",\n        },\n        {\n          row: 26,\n          value: entry.fuelCost,\n          numFmt: \"#,##0.00\",\n          Colour: \"Orange\",\n        },\n        {\n          row: 27,\n          value: entry.UnitRFuelR,\n          numFmt: \"#,##0.00\",\n          Colour: \"Orange\",\n        },\n        { row: 28, value: entry.sfCost, numFmt: \"#,##0.00\", Colour: \"Orange\" },\n        { row: 29, value: entry.dateDiff, numFmt: \"#,##0.00\", Colour: \"Grey\" },\n        { row: 30, value: entry.leaseFee, numFmt: \"#,##0.00\", Colour: \"Grey\" },\n        {\n          row: 31,\n          value: entry.totalCost,\n          numFmt: \"#,##0.00\",\n          Colour: \"Orange\",\n        },\n      ];\n\n      firstReportCells.forEach((cellInfo) => {\n        const cell = worksheet.getCell(cellInfo.row, entryIndex + 2);\n        worksheet.getColumn(entryIndex + 2).width = 21;\n        let cellValue = cellInfo.numFmt\n          ? parseFloat(cellInfo.value)\n          : cellInfo.value;\n\n        cell.value = cellValue;\n        cell.alignment = { horizontal: \"center\" };\n        if (cellInfo.numFmt) {\n          cell.numFmt = cellInfo.numFmt;\n        }\n        // Apply colour styling\n        if (cellInfo.Colour && colourMap[cellInfo.Colour]) {\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: { argb: colourMap[cellInfo.Colour] },\n          };\n        }\n      });\n\n      // Inputting Frequency of Day Type Data in the same column as FirstReportData\n      if (selectedFrequencyByDayType[entryIndex]) {\n        const values = JSON.parse(selectedFrequencyByDayType[entryIndex]);\n        values.forEach((value, rowIndex) => {\n          const cell = worksheet.getCell(rowIndex + 16, entryIndex + 2);\n          cell.value = value;\n          cell.alignment = { horizontal: \"center\" };\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: { argb: colourMap.Yellow },\n          };\n        });\n      }\n    });\n    const totalDataColumnIndex = selectedFirstReportData.length + 2; // Adjust if needed, to make TotalData Column Dynamic.\n\n    // Inputting Total Data\n    const totalDataCells = [\n      { row: 13, value: \"Total\", Colour: \"Orange\" },\n      { row: 14, value: \"-\", Colour: \"Orange\" },\n      { row: 15, value: \"-\", Colour: \"Orange\" },\n      { row: 16, value: selectedTotalData.MonToThurs, Colour: \"Orange\" },\n      { row: 17, value: selectedTotalData.Friday, Colour: \"Orange\" },\n      { row: 18, value: selectedTotalData.Saturdays, Colour: \"Orange\" },\n      { row: 19, value: selectedTotalData.Sundays, Colour: \"Orange\" },\n      { row: 20, value: selectedTotalData.SchHoliday, Colour: \"Orange\" },\n      { row: 21, value: selectedTotalData.Others, Colour: \"Orange\" },\n      {\n        row: 22,\n        value: selectedTotalData.totalMileage,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      { row: 23, value: \"-\", Colour: \"Orange\" },\n      {\n        row: 24,\n        value: selectedTotalData.totalYearlySF,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      { row: 25, value: \"-\", Colour: \"Orange\" },\n      {\n        row: 26,\n        value: selectedTotalData.totalFuelCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      { row: 27, value: \"-\", Colour: \"Orange\" },\n      {\n        row: 28,\n        value: selectedTotalData.totalSfCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      { row: 29, value: \"\", Colour: \"Grey\" },\n      { row: 30, value: \"\", Colour: \"Grey\" },\n      {\n        row: 31,\n        value: selectedTotalData.totalCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n    ];\n\n    // Apply Total Data values into respective cells\n    totalDataCells.forEach((cellInfo) => {\n      const cell = worksheet.getCell(cellInfo.row, totalDataColumnIndex);\n      worksheet.getColumn(totalDataColumnIndex).width = 21;\n      let cellValue = cellInfo.numFmt\n        ? parseFloat(cellInfo.value)\n        : cellInfo.value;\n      cell.value = cellValue;\n      cell.alignment = { horizontal: \"center\" };\n      if (cellInfo.numFmt) {\n        cell.numFmt = cellInfo.numFmt;\n      }\n      // Apply colour styling\n      if (cellInfo.Colour) {\n        cell.fill = {\n          type: \"pattern\",\n          pattern: \"solid\",\n          fgColor: { argb: colourMap[cellInfo.Colour] },\n        };\n      }\n    });\n\n    const colBTotalDataCells = [\n      {\n        row: 32,\n        value: selectedTotalData.totalAmountReq,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      {\n        row: 34,\n        value: selectedTotalData.annualMileage,\n        numFmt: \"#,##0.00\",\n        Colour: \"Yellow\",\n      },\n      {\n        row: 35,\n        value: selectedTotalData.annualSF,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      {\n        row: 36,\n        value: selectedTotalData.annualLF,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      {\n        row: 37,\n        value: selectedTotalData.annualCost,\n        numFmt: \"#,##0.00\",\n        Colour: \"Orange\",\n      },\n      { row: 38, value: selectedTotalData.voStartDate, Colour: \"Orange\" },\n      { row: 39, value: selectedTotalData.voEndDate, Colour: \"Orange\" },\n      { row: 40, value: selectedTotalData.annualCostCrr, numFmt: \"#,##0.00\" },\n    ];\n    colBTotalDataCells.forEach((cellInfo) => {\n      const cell = worksheet.getCell(cellInfo.row, 2); // Always Column B\n      worksheet.getColumn(2).width = 21;\n      let cellValue =\n        cellInfo.numFmt && !isNaN(parseFloat(cellInfo.value))\n          ? parseFloat(cellInfo.value)\n          : cellInfo.value;\n      cell.value = cellValue;\n      if (cellInfo.numFmt && !isNaN(cellValue)) {\n        cell.numFmt = cellInfo.numFmt;\n      }\n      cell.alignment = { horizontal: \"center\" };\n      // Apply colour styling\n      if (cellInfo.Colour) {\n        cell.fill = {\n          type: \"pattern\",\n          pattern: \"solid\",\n          fgColor: { argb: colourMap[cellInfo.Colour] },\n        };\n      }\n    });\n\n    \n    // Inputting Lease Fee Details\n    // If statement to support 'onlyContract=true' scenarios\n    if (selectedLeaseFeeDetails != null) {\n      \n      // Title: Lease Fee Details\n      worksheet.mergeCells(\"D34:G34\");\n      worksheet.getCell(\"D34\").alignment = { horizontal: \"center\" };\n      worksheet.getCell(\"D34\").value = \"Lease Fee Details\";\n\n      // Setting up our headers\n      const headers = [\n        \"Transaction\",\n        \"Handover/Return Date\",\n        \"No. of Buses\",\n        \"Unit Cost\",\n      ];\n      const startRow = 35,\n        startCol = 4;\n\n      // Function to set cell style\n      const setCellStyle = (cell, align, fill, isNumber = false) => {\n        cell.alignment = { horizontal: align };\n        if (isNumber) cell.numFmt = \"#,##0.00\";\n        if (fill)\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: { argb: fill },\n          };\n      };\n\n      // Write headers\n      headers.forEach((header, i) => {\n        let cell = worksheet.getCell(startRow, startCol + i);\n        cell.value = header;\n        setCellStyle(cell, \"center\");\n        worksheet.getColumn(startCol + i).width = 21;\n      });\n\n      // Write transaction data\n      selectedLeaseFeeDetails.transactions.forEach((tr, rIdx) => {\n        headers.forEach((header, hIdx) => {\n          let cell = worksheet.getCell(startRow + rIdx + 1, startCol + hIdx);\n          if (header === \"Unit Cost\") {\n            cell.value = parseFloat(tr[header]);\n            setCellStyle(cell, \"center\", colourMap.Yellow, true);\n          } else {\n            cell.value = tr[header];\n            setCellStyle(\n              cell,\n              \"center\",\n              header !== \"Transaction\" ? colourMap.Yellow : null\n            );\n          }\n        });\n      });\n\n      // Write total\n      let totalRow = startRow + selectedLeaseFeeDetails.transactions.length + 1;\n      worksheet.getCell(totalRow, startCol).value = \"Total LF per month\";\n      setCellStyle(worksheet.getCell(totalRow, startCol), \"right\");\n\n      let totalCell = worksheet.getCell(totalRow, startCol + 3);\n      totalCell.value = parseFloat(selectedLeaseFeeDetails.grandTotal);\n      setCellStyle(totalCell, \"center\", colourMap.Orange, true);\n    }\n    // Apply styles to entire Report\n    styleFirstReport(worksheet);\n\n    try {\n      const buffer = await workbook.xlsx.writeBuffer();\n      console.log(\"ia a buffer\", buffer);\n      const blob = new Blob([buffer], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      });\n\n      saveAs(blob, `${number}_VS.xlsx`);\n    } catch (error) {\n      console.error(\"There was an error generating the Excel buffer:\", error);\n    }\n  });\n  return <DownloadButton onClick={exportVS} label=\"Variation Summary\" />;\n}\n\nexport function ServiceMileageButton({ selectedContract }) {\n  const selectedHeaders = findContractHeader(selectedContract);\n  const selectedData = findContractData(SecondReportData, selectedContract);\n  const selectedTotalData = findContractData(\n    totalSecondReportData,\n    selectedContract\n  );\n\n  //To view selected contract datas, feel free to delete when not needed.\n  // useEffect(() => {\n  //   const dataTypes = [\n  //     { label: \"Second Report Dates\", data: selectedHeaders },\n  //     { label: \"Second Report Data\", data: selectedData },\n  //     { label: \"Total Second Report Data\", data: selectedTotalData },\n  //   ];\n\n  //   const logData = (label, data) => {\n  //     if (data) {\n  //       console.log(\n  //         `muh selected contract ${selectedContract} ${label}:`,\n  //         data\n  //       );\n  //     } else {\n  //       console.log(\"No data found:\", selectedContract);\n  //     }\n  //   };\n\n  //   dataTypes.forEach(({ label, data }) => logData(label, data));\n  // }, [selectedHeaders, selectedData, selectedTotalData, selectedContract]);\n\n  const exportSMCS = useCallback(async () => {\n    const name = variationName;\n    const number = variationNumber;\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(\"Service Mileage & Cost Summary\");\n\n    // Inputting Report #2 Headers\n    const headersColumn = \"B\"; // Column B\n    let headersRow = 4; // Starting from row 4\n    selectedHeaders.forEach((header) => {\n      worksheet.getColumn(headersColumn).width = 34;\n      const cellAddress = `${headersColumn}${headersRow}`;\n      const cell = worksheet.getCell(cellAddress);\n      cell.value = header;\n      cell.font = { bold: true };\n      cell.alignment = {\n        wrapText: header.includes(\"\\n\"),\n        vertical: \"middle\",\n        horizontal: headersRow === 4 ? \"center\" : undefined, // Centering Text for \"Description\" header Only\n      };\n      let fillColor;\n      if (headersRow === 4) {\n        fillColor = colourMap2.Darkblue;\n        cell.font.color = { argb: \"FFFFFF\" };\n      } else if ([5, 9, 10].includes(headersRow)) {\n        fillColor = colourMap2.Blue;\n      } else {\n        fillColor = colourMap2.Lightblue;\n      }\n      cell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: fillColor },\n      };\n      headersRow++;\n    });\n\n    // Inputting Report #2 Data\n    const keys = Object.keys(selectedData);\n    keys.forEach((key, index) => {\n      const columnIndex = index + 3; // +3 Because Column C is our first value placement. Adjust if needed.\n      // Inputing the Service Number in Row 4\n      const serviceNoCell = worksheet.getCell(4, columnIndex);\n      serviceNoCell.value = `Service ${key}`;\n      serviceNoCell.alignment = { horizontal: \"center\" };\n      serviceNoCell.font = { color: { argb: \"FFFFFF\" } };\n      serviceNoCell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: \"4472c4\" },\n      };\n      // Inputting the Report #2 Data values\n      const entry = selectedData[key];\n      const reportCells = [\n        {\n          row: 5,\n          value: entry.annualMileage,\n          numFmt: \"#,##0.00\",\n          Colour: \"Blue\",\n        },\n        {\n          row: 6,\n          value: entry.annualSF,\n          numFmt: \"#,##0.00\",\n          Colour: \"Lightblue\",\n        },\n        {\n          row: 7,\n          value: entry.annualLF,\n          numFmt: \"#,##0.00\",\n          Colour: \"Lightblue\",\n        },\n        {\n          row: 8,\n          value: entry.annualCost,\n          numFmt: \"#,##0.00\",\n          Colour: \"Lightblue\",\n        },\n        { row: 9, value: entry.totalCost, numFmt: \"#,##0.00\", Colour: \"Blue\" },\n        {\n          row: 10,\n          value: entry.totalAmountReq,\n          numFmt: \"#,##0.00\",\n          Colour: \"Blue\",\n        },\n      ];\n      reportCells.forEach((cellInfo) => {\n        const cell = worksheet.getCell(cellInfo.row, columnIndex);\n        worksheet.getColumn(columnIndex).width = 34;\n        let cellValue = cellInfo.numFmt\n          ? parseFloat(cellInfo.value)\n          : cellInfo.value;\n        cell.value = cellValue;\n        cell.alignment = { horizontal: \"center\" };\n        if (cellInfo.numFmt) {\n          cell.numFmt = cellInfo.numFmt;\n        }\n        if (cellInfo.Colour) {\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: { argb: colourMap2[cellInfo.Colour] },\n          };\n        }\n      });\n      const totalDataColumnIndex = keys.length + 3; // To make Total Column Dynamic with Data Cell Columns\n      const totalDataCells = [\n        {\n          row: 5,\n          value: selectedTotalData.annualMileageOverall,\n          numFmt: \"#,##0.00\",\n          Colour: \"Lightblue\",\n        },\n        {\n          row: 6,\n          value: selectedTotalData.annualSFOverall,\n          numFmt: \"#,##0.00\",\n        },\n        {\n          row: 7,\n          value: selectedTotalData.annualLFOverall,\n          numFmt: \"#,##0.00\",\n          Colour: \"Lightblue\",\n        },\n        {\n          row: 8,\n          value: selectedTotalData.annualCostOverall,\n          numFmt: \"#,##0.00\",\n          Colour: \"Lightblue\",\n        },\n        {\n          row: 9,\n          value: selectedTotalData.totalCostOverall,\n          numFmt: \"#,##0.00\",\n          Colour: \"Lightblue\",\n        },\n        {\n          row: 10,\n          value: selectedTotalData.totalAmountReqOverall,\n          numFmt: \"#,##0.00\",\n          Colour: \"Blue\",\n        },\n      ];\n      const totalCell = worksheet.getCell(4, totalDataColumnIndex);\n      totalCell.value = \"Total\";\n      totalCell.alignment = { horizontal: \"center\" };\n      totalCell.font = { color: { argb: \"FFFFFF\" } };\n      totalCell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: \"4472c4\" },\n      };\n      totalDataCells.forEach((cellInfo) => {\n        const cell = worksheet.getCell(cellInfo.row, totalDataColumnIndex);\n        worksheet.getColumn(totalDataColumnIndex).width = 34;\n        let cellValue = cellInfo.numFmt\n          ? parseFloat(cellInfo.value)\n          : cellInfo.value;\n        cell.value = cellValue;\n        cell.alignment = { horizontal: \"center\" };\n        if (cellInfo.numFmt) {\n          cell.numFmt = cellInfo.numFmt;\n        }\n        if (cellInfo.Colour) {\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: { argb: colourMap2[cellInfo.Colour] },\n          };\n        }\n      });\n    });\n\n    // Variation Description (Service Variation Serial No.)\n    worksheet.getCell(\"B2\").value = `${name} (${number})`;\n\n    //Applying Styles to entire Excel\n    styleSecondReport(worksheet);\n\n    try {\n      const buffer = await workbook.xlsx.writeBuffer();\n      console.log(\"Buffer created:\", buffer);\n      const blob = new Blob([buffer], { type: \"application/octet-stream\" });\n      saveAs(blob, `${number}_SMCS.xlsx`);\n    } catch (error) {\n      console.error(\"Failed to download the spreadsheet:\", error);\n    }\n  });\n  return (\n    <DownloadButton\n      onClick={() => exportSMCS(selectedContract)}\n      label=\"Service Mileage and Cost Summary\"\n    />\n  );\n}\n\nexport function ContractVariationButton({ selectedContract1 }) {\n  const exportCVCS = useCallback(\n    async (selectedContract1) => {\n      const number = variationNumber;\n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet(\n        \"Contract Variation Cost Summary\"\n      );\n      const selectedContractData = ThirdReportData[selectedContract1];\n      console.log(\n        `muh data for contract ${selectedContract1}:`,\n        selectedContractData\n      );\n\n      const selectedTotalContractData = totalThirdReportData[selectedContract1];\n      console.log(\n        `muh data for contract ${selectedContract1}:`,\n        selectedTotalContractData\n      );\n\n      // Inputting ThirdReportData\n      selectedContractData.forEach((entry, entryIndex) => {\n        const cellsToFormat = [\n          { row: 3, value: entry.reportStartDate },\n          { row: 4, value: \"to\" },\n          { row: 5, value: entry.reportEndDate },\n          { row: 7, value: Number(entry.unitRate) },\n          { row: 8, value: Number(entry.totalMileage) },\n          { row: 9, value: Number(entry.totalSF) },\n          { row: 10, value: Number(entry.totalLF) },\n        ];\n        cellsToFormat.forEach((cellInfo) => {\n          const cell = worksheet.getCell(cellInfo.row, entryIndex + 2);\n          cell.value = cellInfo.value;\n          if (cellInfo.row > 6) {\n            cell.numFmt = \"#,##0.00\";\n          }\n          cell.alignment = { horizontal: \"center\" };\n        });\n      });\n\n      // Inputting Total Data\n      const totalDataMappings = [\n        { row: 8, value: selectedTotalContractData.totalMileage },\n        { row: 9, value: selectedTotalContractData.totalServiceFee },\n        { row: 10, value: selectedTotalContractData.totalLeaseFee },\n        { row: 11, value: selectedTotalContractData.grandTotal },\n        { row: 12, value: selectedTotalContractData.aboutTotal },\n      ];\n      totalDataMappings.forEach(({ row, value }) => {\n        const cell = worksheet.getCell(`I${row}`);\n        cell.value = Number(value);\n        cell.numFmt = \"#,##0.00\";\n        cell.alignment = { horizontal: \"center\" };\n      });\n\n      // Style Report #3\n      styleThirdReport(worksheet);\n\n      try {\n        const buffer = await workbook.xlsx.writeBuffer();\n        console.log(\"Buffer created:\", buffer);\n        const blob = new Blob([buffer], { type: \"application/octet-stream\" });\n        saveAs(blob, `${number}_CVCS.xlsx`);\n      } catch (error) {\n        console.error(\"Failed to download the spreadsheet:\", error);\n      }\n    },\n    [selectedContract1]\n  );\n\n  return (\n    <DownloadButton\n      onClick={() => exportCVCS(selectedContract1)}\n      label=\"Contract Variation Cost Summary\"\n    />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}