{"ast":null,"code":"import bigDecimal from \"js-big-decimal\";\nimport { totalFirstReportData } from \"../FirstReport/FirstReportData\";\nfunction findContractData(dataSet, selectedContract) {\n  return dataSet[selectedContract];\n}\nfunction calculateSecondReportData(totalFirstReportData) {\n  const results = {};\n  Object.entries(totalFirstReportData).forEach(([contract, services]) => {\n    results[contract] = {};\n    Object.entries(services).forEach(([serviceKey, data]) => {\n      const serviceNo = serviceKey.split('_')[0]; // Extract only service number e.g 16_27012023_16_26012024_GRA -> 16\n      if (!results[contract][serviceNo]) {\n        results[contract][serviceNo] = {\n          annualMileage: new bigDecimal(\"0\"),\n          annualSF: new bigDecimal(\"0\"),\n          annualLF: new bigDecimal(\"0\"),\n          annualCost: new bigDecimal(\"0\"),\n          totalCost: new bigDecimal(\"0\"),\n          totalAmountReq: new bigDecimal(\"0\")\n        };\n      }\n      results[contract][serviceNo].annualMileage = results[contract][serviceNo].annualMileage.add(new bigDecimal(data.annualMileage || \"0\"));\n      results[contract][serviceNo].annualSF = results[contract][serviceNo].annualSF.add(new bigDecimal(data.annualSF || \"0\"));\n      results[contract][serviceNo].annualLF = results[contract][serviceNo].annualLF.add(new bigDecimal(data.annualLF || \"0\"));\n      results[contract][serviceNo].annualCost = results[contract][serviceNo].annualCost.add(new bigDecimal(data.annualCost || \"0\"));\n      results[contract][serviceNo].totalCost = results[contract][serviceNo].totalCost.add(new bigDecimal(data.totalCost || \"0\"));\n      results[contract][serviceNo].totalAmountReq = results[contract][serviceNo].totalAmountReq.add(new bigDecimal(data.totalAmountReq || \"0\"));\n    });\n  });\n\n  // Convert bigDecimal to String\n  Object.keys(results).forEach(contract => {\n    Object.keys(results[contract]).forEach(serviceNo => {\n      Object.keys(results[contract][serviceNo]).forEach(key => {\n        results[contract][serviceNo][key] = results[contract][serviceNo][key].getValue(); // Or .toString()\n      });\n    });\n  });\n  return results;\n}\nconst SecondReportData = calculateSecondReportData(totalFirstReportData);\nconsole.log(\"muh report #2 data:\", SecondReportData);\nfunction calculateTotalData(SecondReportData) {\n  const results = {};\n  for (const contract in SecondReportData) {\n    if (SecondReportData.hasOwnProperty(contract)) {\n      // Initialize aggregated data for each contract\n      results[contract] = {\n        annualMileageOverall: new bigDecimal(0),\n        annualSFOverall: new bigDecimal(0),\n        annualLFOverall: new bigDecimal(0),\n        annualCostOverall: new bigDecimal(0),\n        totalCostOverall: new bigDecimal(0),\n        totalAmountReqOverall: new bigDecimal(0)\n      };\n      for (const service in SecondReportData[contract]) {\n        if (SecondReportData[contract].hasOwnProperty(service)) {\n          results[contract].annualMileageOverall = results[contract].annualMileageOverall.add(new bigDecimal(SecondReportData[contract][service].annualMileage || 0));\n          results[contract].annualSFOverall = results[contract].annualSFOverall.add(new bigDecimal(SecondReportData[contract][service].annualSF || 0));\n          results[contract].annualLFOverall = results[contract].annualLFOverall.add(new bigDecimal(SecondReportData[contract][service].annualLF || 0));\n          results[contract].annualCostOverall = results[contract].annualCostOverall.add(new bigDecimal(SecondReportData[contract][service].annualCost || 0));\n          results[contract].totalCostOverall = results[contract].totalCostOverall.add(new bigDecimal(SecondReportData[contract][service].totalCost || 0));\n          results[contract].totalAmountReqOverall = results[contract].totalAmountReqOverall.add(new bigDecimal(SecondReportData[contract][service].totalAmountReq || 0));\n        }\n      }\n\n      // Extract numerical values using getValue()\n      Object.keys(results[contract]).forEach(key => {\n        results[contract][key] = results[contract][key].getValue();\n      });\n    }\n  }\n  return results;\n}\nconst totalSecondReportData = calculateTotalData(SecondReportData);\nconsole.log(\"muh report #2 overall data:\", totalSecondReportData);\nexport { findContractData, SecondReportData, totalSecondReportData };","map":{"version":3,"names":["bigDecimal","totalFirstReportData","findContractData","dataSet","selectedContract","calculateSecondReportData","results","Object","entries","forEach","contract","services","serviceKey","data","serviceNo","split","annualMileage","annualSF","annualLF","annualCost","totalCost","totalAmountReq","add","keys","key","getValue","SecondReportData","console","log","calculateTotalData","hasOwnProperty","annualMileageOverall","annualSFOverall","annualLFOverall","annualCostOverall","totalCostOverall","totalAmountReqOverall","service","totalSecondReportData"],"sources":["/Users/caizhitan/BCM_Reports/src/Pages/Admin/Reports/SecondReport/SecondReportData.js"],"sourcesContent":["import bigDecimal from \"js-big-decimal\";\nimport { totalFirstReportData } from \"../FirstReport/FirstReportData\";\n\nfunction findContractData(dataSet, selectedContract) {\n  return dataSet[selectedContract];\n}\n\nfunction calculateSecondReportData(totalFirstReportData) {\n  const results = {};\n\n  Object.entries(totalFirstReportData).forEach(([contract, services]) => {\n    results[contract] = {}; \n\n    Object.entries(services).forEach(([serviceKey, data]) => {\n      const serviceNo = serviceKey.split('_')[0]; // Extract only service number e.g 16_27012023_16_26012024_GRA -> 16\n      if (!results[contract][serviceNo]) {\n        results[contract][serviceNo] = {\n          annualMileage: new bigDecimal(\"0\"),\n          annualSF: new bigDecimal(\"0\"),\n          annualLF: new bigDecimal(\"0\"),\n          annualCost: new bigDecimal(\"0\"),\n          totalCost: new bigDecimal(\"0\"),\n          totalAmountReq: new bigDecimal(\"0\"),\n        };\n      }\n\n      results[contract][serviceNo].annualMileage = results[contract][serviceNo].annualMileage.add(new bigDecimal(data.annualMileage || \"0\"));\n      results[contract][serviceNo].annualSF = results[contract][serviceNo].annualSF.add(new bigDecimal(data.annualSF || \"0\"));\n      results[contract][serviceNo].annualLF = results[contract][serviceNo].annualLF.add(new bigDecimal(data.annualLF || \"0\"));\n      results[contract][serviceNo].annualCost = results[contract][serviceNo].annualCost.add(new bigDecimal(data.annualCost || \"0\"));\n      results[contract][serviceNo].totalCost = results[contract][serviceNo].totalCost.add(new bigDecimal(data.totalCost || \"0\"));\n      results[contract][serviceNo].totalAmountReq = results[contract][serviceNo].totalAmountReq.add(new bigDecimal(data.totalAmountReq || \"0\"));\n    });\n  });\n\n  // Convert bigDecimal to String\n  Object.keys(results).forEach(contract => {\n    Object.keys(results[contract]).forEach(serviceNo => {\n      Object.keys(results[contract][serviceNo]).forEach(key => {\n        results[contract][serviceNo][key] = results[contract][serviceNo][key].getValue(); // Or .toString()\n      });\n    });\n  });\n\n  return results;\n}\n\n\nconst SecondReportData = calculateSecondReportData(totalFirstReportData);\nconsole.log(\"muh report #2 data:\", SecondReportData);\n\nfunction calculateTotalData(SecondReportData) {\n  const results = {};\n\n  for (const contract in SecondReportData) {\n    if (SecondReportData.hasOwnProperty(contract)) {\n      // Initialize aggregated data for each contract\n      results[contract] = {\n        annualMileageOverall: new bigDecimal(0),\n        annualSFOverall: new bigDecimal(0),\n        annualLFOverall: new bigDecimal(0),\n        annualCostOverall: new bigDecimal(0),\n        totalCostOverall: new bigDecimal(0),\n        totalAmountReqOverall: new bigDecimal(0),\n      };\n\n      for (const service in SecondReportData[contract]) {\n        if (SecondReportData[contract].hasOwnProperty(service)) {\n          results[contract].annualMileageOverall = results[\n            contract\n          ].annualMileageOverall.add(\n            new bigDecimal(\n              SecondReportData[contract][service].annualMileage || 0\n            )\n          );\n          results[contract].annualSFOverall = results[\n            contract\n          ].annualSFOverall.add(\n            new bigDecimal(SecondReportData[contract][service].annualSF || 0)\n          );\n          results[contract].annualLFOverall = results[\n            contract\n          ].annualLFOverall.add(\n            new bigDecimal(SecondReportData[contract][service].annualLF || 0)\n          );\n          results[contract].annualCostOverall = results[\n            contract\n          ].annualCostOverall.add(\n            new bigDecimal(SecondReportData[contract][service].annualCost || 0)\n          );\n          results[contract].totalCostOverall = results[\n            contract\n          ].totalCostOverall.add(\n            new bigDecimal(SecondReportData[contract][service].totalCost || 0)\n          );\n          results[contract].totalAmountReqOverall = results[\n            contract\n          ].totalAmountReqOverall.add(\n            new bigDecimal(\n              SecondReportData[contract][service].totalAmountReq || 0\n            )\n          );\n        }\n      }\n\n      // Extract numerical values using getValue()\n      Object.keys(results[contract]).forEach((key) => {\n        results[contract][key] = results[contract][key].getValue();\n      });\n    }\n  }\n\n  return results;\n}\n\nconst totalSecondReportData = calculateTotalData(SecondReportData);\nconsole.log(\"muh report #2 overall data:\", totalSecondReportData);\n\nexport { findContractData, SecondReportData, totalSecondReportData };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}