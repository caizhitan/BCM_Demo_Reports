{"ast":null,"code":"import { BusData } from \"../\";\nfunction findContractHeader(selectedContract) {\n  let contract = BusData.body.contracts.find(c => c.contract === selectedContract);\n\n  // If not found in contracts, search in busFleet\n  if (!contract) {\n    const fleet = BusData.body.busFleet.find(f => f.contract === selectedContract);\n\n    // If still not found, return default message\n    if (!fleet) {\n      return {\n        earliestDate: \"Contract not Selected Yet\",\n        latestDate: \"Contract not Selected Yet\"\n      };\n    }\n\n    // Adjust to handle the busFleet structure\n    contract = {\n      values: fleet.values.map(v => ({\n        implementationPeriod: v.Implementation.map(i => [i])\n      }))\n    };\n  }\n\n  // Process dates for either contracts or busFleet\n  let dates = contract.values.flatMap(value => value.implementationPeriod.flatMap(period => period[0].split(\"-\")));\n  if (dates.length === 0) return {\n    earliestDate: \"No dates found\",\n    latestDate: \"No dates found\"\n  };\n  dates = dates.map(d => new Date(d.substr(4), d.substr(2, 2) - 1, d.substr(0, 2)));\n  const earliestDate = new Date(Math.min(...dates));\n  const latestDate = new Date(Math.max(...dates));\n  const formatDate = date => `${date.getDate().toString().padStart(2, \"0\")} ${date.toLocaleString(\"default\", {\n    month: \"short\"\n  })} ${date.getFullYear()}`;\n  const headers = [\"Description\", \"Annual Mileage Impact\", \"Annual Service Fee Impact\", \"Annual Lease Fee Impact\", \"Total Annual Budget\", `Total Budget for Tentative Implementation Period: ${formatDate(earliestDate)} to ${formatDate(latestDate)}`, `Total Budget (rounded) for Tentative Implementation Period: ${formatDate(earliestDate)} to ${formatDate(latestDate)}`];\n  return headers;\n}\nexport { findContractHeader };","map":{"version":3,"names":["BusData","findContractHeader","selectedContract","contract","body","contracts","find","c","fleet","busFleet","f","earliestDate","latestDate","values","map","v","implementationPeriod","Implementation","i","dates","flatMap","value","period","split","length","d","Date","substr","Math","min","max","formatDate","date","getDate","toString","padStart","toLocaleString","month","getFullYear","headers"],"sources":["/Users/caizhitan/BCM_Reports/src/Pages/Admin/Reports/SecondReport/ExcelHeaders.js"],"sourcesContent":["import { BusData } from \"../\"\n\nfunction findContractHeader(selectedContract) {\n  let contract = BusData.body.contracts.find(\n    (c) => c.contract === selectedContract\n  );\n\n  // If not found in contracts, search in busFleet\n  if (!contract) {\n    const fleet = BusData.body.busFleet.find(\n      (f) => f.contract === selectedContract\n    );\n\n    // If still not found, return default message\n    if (!fleet) {\n      return {\n        earliestDate: \"Contract not Selected Yet\",\n        latestDate: \"Contract not Selected Yet\",\n      };\n    }\n\n    // Adjust to handle the busFleet structure\n    contract = {\n      values: fleet.values.map(v => ({\n        implementationPeriod: v.Implementation.map(i => [i])\n      }))\n    };\n  }\n\n  // Process dates for either contracts or busFleet\n  let dates = contract.values.flatMap((value) =>\n    value.implementationPeriod.flatMap((period) => period[0].split(\"-\"))\n  );\n\n  if (dates.length === 0)\n    return { earliestDate: \"No dates found\", latestDate: \"No dates found\" };\n\n  dates = dates.map(\n    (d) => new Date(d.substr(4), d.substr(2, 2) - 1, d.substr(0, 2))\n  );\n\n  const earliestDate = new Date(Math.min(...dates));\n  const latestDate = new Date(Math.max(...dates));\n\n  const formatDate = (date) =>\n    `${date.getDate().toString().padStart(2, \"0\")} ${date.toLocaleString(\n      \"default\",\n      { month: \"short\" }\n    )} ${date.getFullYear()}`;\n\n  const headers = [\n    \"Description\",\n    \"Annual Mileage Impact\",\n    \"Annual Service Fee Impact\",\n    \"Annual Lease Fee Impact\",\n    \"Total Annual Budget\",\n    `Total Budget for Tentative Implementation Period: ${formatDate(earliestDate)} to ${formatDate(latestDate)}`,\n    `Total Budget (rounded) for Tentative Implementation Period: ${formatDate(earliestDate)} to ${formatDate(latestDate)}`,\n  ];\n\n  return headers;\n}\n\n\n\n\nexport { findContractHeader };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,KAAK;AAE7B,SAASC,kBAAkBA,CAACC,gBAAgB,EAAE;EAC5C,IAAIC,QAAQ,GAAGH,OAAO,CAACI,IAAI,CAACC,SAAS,CAACC,IAAI,CACvCC,CAAC,IAAKA,CAAC,CAACJ,QAAQ,KAAKD,gBACxB,CAAC;;EAED;EACA,IAAI,CAACC,QAAQ,EAAE;IACb,MAAMK,KAAK,GAAGR,OAAO,CAACI,IAAI,CAACK,QAAQ,CAACH,IAAI,CACrCI,CAAC,IAAKA,CAAC,CAACP,QAAQ,KAAKD,gBACxB,CAAC;;IAED;IACA,IAAI,CAACM,KAAK,EAAE;MACV,OAAO;QACLG,YAAY,EAAE,2BAA2B;QACzCC,UAAU,EAAE;MACd,CAAC;IACH;;IAEA;IACAT,QAAQ,GAAG;MACTU,MAAM,EAAEL,KAAK,CAACK,MAAM,CAACC,GAAG,CAACC,CAAC,KAAK;QAC7BC,oBAAoB,EAAED,CAAC,CAACE,cAAc,CAACH,GAAG,CAACI,CAAC,IAAI,CAACA,CAAC,CAAC;MACrD,CAAC,CAAC;IACJ,CAAC;EACH;;EAEA;EACA,IAAIC,KAAK,GAAGhB,QAAQ,CAACU,MAAM,CAACO,OAAO,CAAEC,KAAK,IACxCA,KAAK,CAACL,oBAAoB,CAACI,OAAO,CAAEE,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CACrE,CAAC;EAED,IAAIJ,KAAK,CAACK,MAAM,KAAK,CAAC,EACpB,OAAO;IAAEb,YAAY,EAAE,gBAAgB;IAAEC,UAAU,EAAE;EAAiB,CAAC;EAEzEO,KAAK,GAAGA,KAAK,CAACL,GAAG,CACdW,CAAC,IAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,EAAEF,CAAC,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAEF,CAAC,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CACjE,CAAC;EAED,MAAMhB,YAAY,GAAG,IAAIe,IAAI,CAACE,IAAI,CAACC,GAAG,CAAC,GAAGV,KAAK,CAAC,CAAC;EACjD,MAAMP,UAAU,GAAG,IAAIc,IAAI,CAACE,IAAI,CAACE,GAAG,CAAC,GAAGX,KAAK,CAAC,CAAC;EAE/C,MAAMY,UAAU,GAAIC,IAAI,IACrB,GAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGH,IAAI,CAACI,cAAc,CAClE,SAAS,EACT;IAAEC,KAAK,EAAE;EAAQ,CACnB,CAAE,IAAGL,IAAI,CAACM,WAAW,CAAC,CAAE,EAAC;EAE3B,MAAMC,OAAO,GAAG,CACd,aAAa,EACb,uBAAuB,EACvB,2BAA2B,EAC3B,yBAAyB,EACzB,qBAAqB,EACpB,qDAAoDR,UAAU,CAACpB,YAAY,CAAE,OAAMoB,UAAU,CAACnB,UAAU,CAAE,EAAC,EAC3G,+DAA8DmB,UAAU,CAACpB,YAAY,CAAE,OAAMoB,UAAU,CAACnB,UAAU,CAAE,EAAC,CACvH;EAED,OAAO2B,OAAO;AAChB;AAKA,SAAStC,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}