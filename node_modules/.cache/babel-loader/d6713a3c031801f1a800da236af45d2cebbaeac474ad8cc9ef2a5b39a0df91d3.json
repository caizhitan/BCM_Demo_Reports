{"ast":null,"code":"// For DayJS library to calculate pro-rated number of months\n// Takes in DDMMYYYY e.g 07122023 & converts to YYYY-MM-DD e.g 2023-12-07 for DayJS\nfunction formatDateDayJS(number) {\n  // Convert the number to a string\n  let str = number.toString();\n  // Ensure the string is of the correct length (8 characters)\n  if (str.length !== 8) {\n    return \"Invalid Date\";\n  }\n  // Extract the day, month, and year parts\n  const day = str.substring(0, 2);\n  const month = str.substring(2, 4);\n  const year = str.substring(4);\n  return `${year}-${month}-${day}`;\n}\nfunction formatLeaseFeeDetailsDateDayJS(dateStr) {\n  const months = {\n    Jan: '01',\n    Feb: '02',\n    Mar: '03',\n    Apr: '04',\n    May: '05',\n    Jun: '06',\n    Jul: '07',\n    Aug: '08',\n    Sep: '09',\n    Oct: '10',\n    Nov: '11',\n    Dec: '12'\n  };\n  const parts = dateStr.split('-'); // ['19', 'Feb', '2024']\n  const day = parts[0];\n  const month = months[parts[1]];\n  const year = parts[2];\n  return `${year}-${month}-${day}`;\n}\n\n// To format date from YYYY-MM-DD to DD/MM/YY (23/10/23) or D/M/YY (1/8/23) for Report #1 (Duration Date)\nfunction formatDateForDuration(date) {\n  let [year, month, day] = date.split(\"-\");\n  return `${parseInt(day)}/${parseInt(month)}/${year.slice(-2)}`;\n}\n\n// To format date from 220123 into 22-Jan-2023 or 10123 into 1-Jan-2023 for Report #1 (Handover/Return Date)\nfunction formatDateForTransactions(date) {\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const dateStr = date.toString().padStart(6, \"0\");\n  const day = dateStr.length === 5 ? `0${dateStr[0]}` : dateStr.substring(0, 2);\n  const monthIndex = parseInt(dateStr.substring(dateStr.length - 4, dateStr.length - 2), 10) - 1;\n  const year = `20${dateStr.slice(-2)}`;\n  return monthIndex >= 0 && monthIndex < 12 ? `${day}-${months[monthIndex]}-${year}` : \"Invalid Month\";\n}\n\n// To format date from YYYY-MM-DD into DD-MMM(Alphabets)-YYYY for Report #1 (VO Start & End Date)\nfunction formatDateForVO(voDate) {\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(voDate);\n  return `${(\"0\" + date.getDate()).slice(-2)}-${months[date.getMonth()]}-${date.getFullYear()}`;\n}\nexport { formatDateDayJS, formatLeaseFeeDetailsDateDayJS, formatDateForDuration, formatDateForTransactions, formatDateForVO };","map":{"version":3,"names":["formatDateDayJS","number","str","toString","length","day","substring","month","year","formatLeaseFeeDetailsDateDayJS","dateStr","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","parts","split","formatDateForDuration","date","parseInt","slice","formatDateForTransactions","padStart","monthIndex","formatDateForVO","voDate","Date","getDate","getMonth","getFullYear"],"sources":["/Users/caizhitan/BCM_Reports/src/Pages/Admin/FormatDate.js"],"sourcesContent":["// For DayJS library to calculate pro-rated number of months\n// Takes in DDMMYYYY e.g 07122023 & converts to YYYY-MM-DD e.g 2023-12-07 for DayJS\nfunction formatDateDayJS(number) {\n    // Convert the number to a string\n    let str = number.toString();\n    // Ensure the string is of the correct length (8 characters)\n    if (str.length !== 8) {\n      return \"Invalid Date\";\n    }\n    // Extract the day, month, and year parts\n    const day = str.substring(0, 2);\n    const month = str.substring(2, 4);\n    const year = str.substring(4);\n  \n    return `${year}-${month}-${day}`;\n  }\n  \n  function formatLeaseFeeDetailsDateDayJS(dateStr){\n    const months = {\n      Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06',\n      Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12'\n    };\n  \n    const parts = dateStr.split('-'); // ['19', 'Feb', '2024']\n    const day = parts[0];\n    const month = months[parts[1]];\n    const year = parts[2];\n  \n    return `${year}-${month}-${day}`;\n  }\n  \n  // To format date from YYYY-MM-DD to DD/MM/YY (23/10/23) or D/M/YY (1/8/23) for Report #1 (Duration Date)\n  function formatDateForDuration(date) {\n    let [year, month, day] = date.split(\"-\");\n    return `${parseInt(day)}/${parseInt(month)}/${year.slice(-2)}`;\n  }\n  \n  // To format date from 220123 into 22-Jan-2023 or 10123 into 1-Jan-2023 for Report #1 (Handover/Return Date)\n  function formatDateForTransactions(date) {\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const dateStr = date.toString().padStart(6, \"0\");\n    const day = dateStr.length === 5 ? `0${dateStr[0]}` : dateStr.substring(0, 2);\n    const monthIndex =\n      parseInt(dateStr.substring(dateStr.length - 4, dateStr.length - 2), 10) - 1;\n    const year = `20${dateStr.slice(-2)}`;\n  \n    return monthIndex >= 0 && monthIndex < 12\n      ? `${day}-${months[monthIndex]}-${year}`\n      : \"Invalid Month\";\n  }\n  \n  // To format date from YYYY-MM-DD into DD-MMM(Alphabets)-YYYY for Report #1 (VO Start & End Date)\n  function formatDateForVO(voDate) {\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const date = new Date(voDate);\n    return `${(\"0\" + date.getDate()).slice(-2)}-${\n      months[date.getMonth()]\n    }-${date.getFullYear()}`;\n  }\n  \n  export {\n    formatDateDayJS,\n    formatLeaseFeeDetailsDateDayJS,\n    formatDateForDuration,\n    formatDateForTransactions,\n    formatDateForVO,\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}