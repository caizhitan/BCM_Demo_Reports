{"ast":null,"code":"//function add {\nfunction add(number1, number2) {\n  var _a;\n  if (number2 === void 0) {\n    number2 = \"0\";\n  }\n  var neg = 0,\n    ind = -1;\n  //check for negatives\n  if (number1[0] == \"-\") {\n    number1 = number1.substring(1);\n    if (!testZero(number1)) {\n      neg++;\n      ind = 1;\n      number1.length;\n    }\n  }\n  if (number2[0] == \"-\") {\n    number2 = number2.substring(1);\n    if (!testZero(number2)) {\n      neg++;\n      ind = 2;\n      number2.length;\n    }\n  }\n  number1 = trim(number1);\n  number2 = trim(number2);\n  _a = pad(trim(number1), trim(number2)), number1 = _a[0], number2 = _a[1];\n  if (neg == 1) {\n    if (ind === 1) number1 = compliment(number1);else if (ind === 2) number2 = compliment(number2);\n  }\n  var res = addCore(number1, number2);\n  if (!neg) return trim(res);else if (neg == 2) return \"-\" + trim(res);else {\n    if (number1.length < res.length) return trim(res.substring(1));else return \"-\" + trim(compliment(res));\n  }\n}\nfunction compliment(number) {\n  if (testZero(number)) {\n    return number;\n  }\n  var s = \"\",\n    l = number.length,\n    dec = number.split(\".\")[1],\n    ld = dec ? dec.length : 0;\n  for (var i = 0; i < l; i++) {\n    if (number[i] >= \"0\" && number[i] <= \"9\") s += 9 - parseInt(number[i]);else s += number[i];\n  }\n  var one = ld > 0 ? \"0.\" + new Array(ld).join(\"0\") + \"1\" : \"1\";\n  return addCore(s, one);\n}\nfunction trim(number) {\n  var parts = number.split(\".\");\n  if (!parts[0]) parts[0] = \"0\";\n  while (parts[0][0] == \"0\" && parts[0].length > 1) parts[0] = parts[0].substring(1);\n  return parts[0] + (parts[1] ? \".\" + parts[1] : \"\");\n}\nfunction pad(number1, number2) {\n  var parts1 = number1.split(\".\"),\n    parts2 = number2.split(\".\");\n  //pad integral part\n  var length1 = parts1[0].length,\n    length2 = parts2[0].length;\n  if (length1 > length2) {\n    parts2[0] = new Array(Math.abs(length1 - length2) + 1).join(\"0\") + (parts2[0] ? parts2[0] : \"\");\n  } else {\n    parts1[0] = new Array(Math.abs(length1 - length2) + 1).join(\"0\") + (parts1[0] ? parts1[0] : \"\");\n  }\n  //pad fractional part\n  length1 = parts1[1] ? parts1[1].length : 0, length2 = parts2[1] ? parts2[1].length : 0;\n  if (length1 || length2) {\n    if (length1 > length2) {\n      parts2[1] = (parts2[1] ? parts2[1] : \"\") + new Array(Math.abs(length1 - length2) + 1).join(\"0\");\n    } else {\n      parts1[1] = (parts1[1] ? parts1[1] : \"\") + new Array(Math.abs(length1 - length2) + 1).join(\"0\");\n    }\n  }\n  number1 = parts1[0] + (parts1[1] ? \".\" + parts1[1] : \"\");\n  number2 = parts2[0] + (parts2[1] ? \".\" + parts2[1] : \"\");\n  return [number1, number2];\n}\nfunction addCore(number1, number2) {\n  var _a;\n  _a = pad(number1, number2), number1 = _a[0], number2 = _a[1];\n  var sum = \"\",\n    carry = 0;\n  for (var i = number1.length - 1; i >= 0; i--) {\n    if (number1[i] === \".\") {\n      sum = \".\" + sum;\n      continue;\n    }\n    var temp = parseInt(number1[i]) + parseInt(number2[i]) + carry;\n    sum = temp % 10 + sum;\n    carry = Math.floor(temp / 10);\n  }\n  return carry ? carry.toString() + sum : sum;\n}\nfunction testZero(number) {\n  return /^0[0]*[.]{0,1}[0]*$/.test(number);\n}\nfunction abs(n) {\n  if (typeof n == \"number\" || typeof n == \"bigint\") n = n.toString();\n  if (n[0] == \"-\") return n.substring(1);\n  return n;\n}\nvar RoundingModes;\n(function (RoundingModes) {\n  /**\n   * Rounding mode to round towards positive infinity.\n   */\n  RoundingModes[RoundingModes[\"CEILING\"] = 0] = \"CEILING\";\n  /**\n   * Rounding mode to round towards zero.\n   */\n  RoundingModes[RoundingModes[\"DOWN\"] = 1] = \"DOWN\";\n  /**\n   * Rounding mode to round towards negative infinity.\n   */\n  RoundingModes[RoundingModes[\"FLOOR\"] = 2] = \"FLOOR\";\n  /**\n   * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant,\n   * in which case round down.\n   */\n  RoundingModes[RoundingModes[\"HALF_DOWN\"] = 3] = \"HALF_DOWN\";\n  /**\n   * Rounding mode to round towards the \"nearest neighbor\" unless both neighbors are equidistant,\n   * in which case, round towards the even neighbor.\n   */\n  RoundingModes[RoundingModes[\"HALF_EVEN\"] = 4] = \"HALF_EVEN\";\n  /**\n   * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant,\n   * in which case round up.\n   */\n  RoundingModes[RoundingModes[\"HALF_UP\"] = 5] = \"HALF_UP\";\n  /**\n   * Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary.\n   * UNIMPLEMENTED\n   */\n  RoundingModes[RoundingModes[\"UNNECESSARY\"] = 6] = \"UNNECESSARY\";\n  /**\n   * Rounding mode to round away from zero.\n   */\n  RoundingModes[RoundingModes[\"UP\"] = 7] = \"UP\";\n})(RoundingModes || (RoundingModes = {}));\n\n/**\n *\n * @param input the number to round\n * @param n precision\n * @param mode Rounding Mode\n */\nfunction roundOff(input, n, mode) {\n  if (n === void 0) {\n    n = 0;\n  }\n  if (mode === void 0) {\n    mode = RoundingModes.HALF_EVEN;\n  }\n  if (mode === RoundingModes.UNNECESSARY) {\n    throw new Error(\"UNNECESSARY Rounding Mode has not yet been implemented\");\n  }\n  if (typeof input == 'number' || typeof input == 'bigint') input = input.toString();\n  var neg = false;\n  if (input[0] === '-') {\n    neg = true;\n    input = input.substring(1);\n  }\n  var parts = input.split('.'),\n    partInt = parts[0],\n    partDec = parts[1];\n  //handle case of -ve n: roundOff(12564,-2)=12600\n  if (n < 0) {\n    n = -n;\n    if (partInt.length <= n) return '0';else {\n      var prefix = partInt.substr(0, partInt.length - n);\n      input = prefix + '.' + partInt.substr(partInt.length - n) + partDec;\n      prefix = roundOff(input, 0, mode);\n      return (neg ? '-' : '') + prefix + new Array(n + 1).join('0');\n    }\n  }\n  // handle case when integer output is desired\n  if (n == 0) {\n    partInt.length;\n    if (greaterThanFive(parts[1], partInt, neg, mode)) {\n      partInt = increment(partInt);\n    }\n    return (neg && parseInt(partInt) ? '-' : '') + partInt;\n  }\n  // handle case when n>0\n  if (!parts[1]) {\n    return (neg ? '-' : '') + partInt + '.' + new Array(n + 1).join('0');\n  } else if (parts[1].length < n) {\n    return (neg ? '-' : '') + partInt + '.' + parts[1] + new Array(n - parts[1].length + 1).join('0');\n  }\n  partDec = parts[1].substring(0, n);\n  var rem = parts[1].substring(n);\n  if (rem && greaterThanFive(rem, partDec, neg, mode)) {\n    partDec = increment(partDec);\n    if (partDec.length > n) {\n      return (neg ? '-' : '') + increment(partInt, parseInt(partDec[0])) + '.' + partDec.substring(1);\n    }\n  }\n  return (neg && (parseInt(partInt) || parseInt(partDec)) ? '-' : '') + partInt + '.' + partDec;\n}\nfunction greaterThanFive(part, pre, neg, mode) {\n  if (!part || part === new Array(part.length + 1).join('0')) return false;\n  // #region UP, DOWN, CEILING, FLOOR \n  if (mode === RoundingModes.DOWN || !neg && mode === RoundingModes.FLOOR || neg && mode === RoundingModes.CEILING) return false;\n  if (mode === RoundingModes.UP || neg && mode === RoundingModes.FLOOR || !neg && mode === RoundingModes.CEILING) return true;\n  // #endregion\n  // case when part !== five\n  var five = '5' + new Array(part.length).join('0');\n  if (part > five) return true;else if (part < five) return false;\n  // case when part === five\n  switch (mode) {\n    case RoundingModes.HALF_DOWN:\n      return false;\n    case RoundingModes.HALF_UP:\n      return true;\n    case RoundingModes.HALF_EVEN:\n    default:\n      return parseInt(pre[pre.length - 1]) % 2 == 1;\n  }\n}\nfunction increment(part, c) {\n  if (c === void 0) {\n    c = 0;\n  }\n  if (!c) c = 1;\n  if (typeof part == 'number') part.toString();\n  var l = part.length - 1,\n    s = '';\n  for (var i = l; i >= 0; i--) {\n    var x = parseInt(part[i]) + c;\n    if (x == 10) {\n      c = 1;\n      x = 0;\n    } else {\n      c = 0;\n    }\n    s += x;\n  }\n  if (c) s += c;\n  return s.split('').reverse().join('');\n}\n\n/*\n* Removes zero from front and back*/\nfunction stripTrailingZero(number) {\n  var isNegative = number[0] === '-';\n  if (isNegative) {\n    number = number.substr(1);\n  }\n  while (number[0] == '0') {\n    number = number.substr(1);\n  }\n  if (number.indexOf('.') != -1) {\n    while (number[number.length - 1] == '0') {\n      number = number.substr(0, number.length - 1);\n    }\n  }\n  if (number == \"\" || number == \".\") {\n    number = '0';\n  } else if (number[number.length - 1] == '.') {\n    number = number.substr(0, number.length - 1);\n  }\n  if (number[0] == '.') {\n    number = '0' + number;\n  }\n  if (isNegative && number != '0') {\n    number = '-' + number;\n  }\n  return number;\n}\nfunction multiply(number1, number2) {\n  number1 = number1.toString();\n  number2 = number2.toString();\n  /*Filter numbers*/\n  var negative = 0;\n  if (number1[0] == '-') {\n    negative++;\n    number1 = number1.substr(1);\n  }\n  if (number2[0] == '-') {\n    negative++;\n    number2 = number2.substr(1);\n  }\n  number1 = stripTrailingZero(number1);\n  number2 = stripTrailingZero(number2);\n  var decimalLength1 = 0;\n  var decimalLength2 = 0;\n  if (number1.indexOf('.') != -1) {\n    decimalLength1 = number1.length - number1.indexOf('.') - 1;\n  }\n  if (number2.indexOf('.') != -1) {\n    decimalLength2 = number2.length - number2.indexOf('.') - 1;\n  }\n  var decimalLength = decimalLength1 + decimalLength2;\n  number1 = stripTrailingZero(number1.replace('.', ''));\n  number2 = stripTrailingZero(number2.replace('.', ''));\n  if (number1.length < number2.length) {\n    var temp = number1;\n    number1 = number2;\n    number2 = temp;\n  }\n  if (number2 == '0') {\n    return '0';\n  }\n  /*\n  * Core multiplication\n  */\n  var length = number2.length;\n  var carry = 0;\n  var positionVector = [];\n  var currentPosition = length - 1;\n  var result = \"\";\n  for (var i = 0; i < length; i++) {\n    positionVector[i] = number1.length - 1;\n  }\n  for (var i = 0; i < 2 * number1.length; i++) {\n    var sum = 0;\n    for (var j = number2.length - 1; j >= currentPosition && j >= 0; j--) {\n      if (positionVector[j] > -1 && positionVector[j] < number1.length) {\n        sum += parseInt(number1[positionVector[j]--]) * parseInt(number2[j]);\n      }\n    }\n    sum += carry;\n    carry = Math.floor(sum / 10);\n    result = sum % 10 + result;\n    currentPosition--;\n  }\n  /*\n  * Formatting result\n  */\n  result = stripTrailingZero(adjustDecimal(result, decimalLength));\n  if (negative == 1) {\n    result = '-' + result;\n  }\n  return result;\n}\n/*\n* Add decimal point\n*/\nfunction adjustDecimal(number, decimal) {\n  if (decimal == 0) return number;else {\n    number = decimal >= number.length ? new Array(decimal - number.length + 1).join('0') + number : number;\n    return number.substr(0, number.length - decimal) + '.' + number.substr(number.length - decimal, decimal);\n  }\n}\nfunction divide(dividend, divisor, precission) {\n  if (precission === void 0) {\n    precission = 8;\n  }\n  if (divisor == 0) {\n    throw new Error('Cannot divide by 0');\n  }\n  dividend = dividend.toString();\n  divisor = divisor.toString();\n  // remove trailing zeros in decimal ISSUE#18\n  dividend = dividend.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\n  divisor = divisor.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\n  if (dividend == 0) return '0';\n  var neg = 0;\n  if (divisor[0] == '-') {\n    divisor = divisor.substring(1);\n    neg++;\n  }\n  if (dividend[0] == '-') {\n    dividend = dividend.substring(1);\n    neg++;\n  }\n  var pt_dvsr = divisor.indexOf('.') > 0 ? divisor.length - divisor.indexOf('.') - 1 : -1;\n  divisor = trim(divisor.replace('.', ''));\n  if (pt_dvsr >= 0) {\n    var pt_dvnd = dividend.indexOf('.') > 0 ? dividend.length - dividend.indexOf('.') - 1 : -1;\n    if (pt_dvnd == -1) {\n      dividend = trim(dividend + new Array(pt_dvsr + 1).join('0'));\n    } else {\n      if (pt_dvsr > pt_dvnd) {\n        dividend = dividend.replace('.', '');\n        dividend = trim(dividend + new Array(pt_dvsr - pt_dvnd + 1).join('0'));\n      } else if (pt_dvsr < pt_dvnd) {\n        dividend = dividend.replace('.', '');\n        var loc = dividend.length - pt_dvnd + pt_dvsr;\n        dividend = trim(dividend.substring(0, loc) + '.' + dividend.substring(loc));\n      } else if (pt_dvsr == pt_dvnd) {\n        dividend = trim(dividend.replace('.', ''));\n      }\n    }\n  }\n  var prec = 0,\n    dl = divisor.length,\n    quotent = '';\n  var dvnd = dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl ? dividend.substring(0, dl + 1) : dividend.substring(0, dl);\n  dividend = dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl ? dividend.substring(dl + 1) : dividend.substring(dl);\n  if (dvnd.indexOf('.') > -1) {\n    var shift = dvnd.length - dvnd.indexOf('.') - 1;\n    dvnd = dvnd.replace('.', '');\n    if (dl > dvnd.length) {\n      shift += dl - dvnd.length;\n      dvnd = dvnd + new Array(dl - dvnd.length + 1).join('0');\n    }\n    prec = shift;\n    quotent = '0.' + new Array(shift).join('0');\n  }\n  precission = precission + 2;\n  while (prec <= precission) {\n    var qt = 0;\n    while (parseInt(dvnd) >= parseInt(divisor)) {\n      dvnd = add(dvnd, '-' + divisor);\n      qt++;\n    }\n    quotent += qt;\n    if (!dividend) {\n      if (!prec) quotent += '.';\n      prec++;\n      dvnd = dvnd + '0';\n    } else {\n      if (dividend[0] == '.') {\n        quotent += '.';\n        prec++;\n        dividend = dividend.substring(1);\n      }\n      dvnd = dvnd + dividend.substring(0, 1);\n      dividend = dividend.substring(1);\n    }\n  }\n  return (neg == 1 ? '-' : '') + trim(roundOff(quotent, precission - 2));\n}\nfunction subtract(number1, number2) {\n  number1 = number1.toString();\n  number2 = number2.toString();\n  number2 = negate(number2);\n  return add(number1, number2);\n}\nfunction negate(number) {\n  if (number[0] == '-') {\n    number = number.substr(1);\n  } else {\n    number = '-' + number;\n  }\n  return number;\n}\nfunction modulus(dividend, divisor) {\n  if (divisor == 0) {\n    throw new Error('Cannot divide by 0');\n  }\n  dividend = dividend.toString();\n  divisor = divisor.toString();\n  validate(dividend);\n  validate(divisor);\n  var sign = '';\n  if (dividend[0] == '-') {\n    sign = '-';\n    dividend = dividend.substr(1);\n  }\n  if (divisor[0] == '-') {\n    divisor = divisor.substr(1);\n  }\n  var result = subtract(dividend, multiply(divisor, roundOff(divide(dividend, divisor), 0, RoundingModes.FLOOR)));\n  return sign + result;\n}\nfunction validate(oparand) {\n  if (oparand.indexOf('.') != -1) {\n    throw new Error('Modulus of non-integers not supported');\n  }\n}\nfunction compareTo(number1, number2) {\n  var _a, _b;\n  var negative = false;\n  _a = [number1, number2].map(function (n) {\n    return stripTrailingZero(n);\n  }), number1 = _a[0], number2 = _a[1];\n  if (number1[0] == '-' && number2[0] != \"-\") {\n    return -1;\n  } else if (number1[0] != '-' && number2[0] == '-') {\n    return 1;\n  } else if (number1[0] == '-' && number2[0] == '-') {\n    number1 = number1.substr(1);\n    number2 = number2.substr(1);\n    negative = true;\n  }\n  _b = pad(number1, number2), number1 = _b[0], number2 = _b[1];\n  if (number1.localeCompare(number2) == 0) {\n    return 0;\n  }\n  for (var i = 0; i < number1.length; i++) {\n    if (number1[i] == number2[i]) {\n      continue;\n    } else if (number1[i] > number2[i]) {\n      if (negative) {\n        return -1;\n      } else {\n        return 1;\n      }\n    } else {\n      if (negative) {\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n  }\n  return 0;\n}\nvar bigDecimal = /** @class */function () {\n  function bigDecimal(number) {\n    if (number === void 0) {\n      number = \"0\";\n    }\n    this.value = bigDecimal.validate(number);\n  }\n  bigDecimal.validate = function (number) {\n    if (number) {\n      number = number.toString();\n      if (isNaN(number)) throw Error(\"Parameter is not a number: \" + number);\n      if (number[0] == \"+\") number = number.substring(1);\n    } else number = \"0\";\n    //handle missing leading zero\n    if (number.startsWith(\".\")) number = \"0\" + number;else if (number.startsWith(\"-.\")) number = \"-0\" + number.substr(1);\n    //handle exponentiation\n    if (/e/i.test(number)) {\n      var _a = number.split(/[eE]/),\n        mantisa = _a[0],\n        exponent = _a[1];\n      mantisa = trim(mantisa);\n      var sign = \"\";\n      if (mantisa[0] == \"-\") {\n        sign = \"-\";\n        mantisa = mantisa.substring(1);\n      }\n      if (mantisa.indexOf(\".\") >= 0) {\n        exponent = parseInt(exponent) + mantisa.indexOf(\".\");\n        mantisa = mantisa.replace(\".\", \"\");\n      } else {\n        exponent = parseInt(exponent) + mantisa.length;\n      }\n      if (mantisa.length < exponent) {\n        number = sign + mantisa + new Array(exponent - mantisa.length + 1).join(\"0\");\n      } else if (mantisa.length >= exponent && exponent > 0) {\n        number = sign + trim(mantisa.substring(0, exponent)) + (mantisa.length > exponent ? \".\" + mantisa.substring(exponent) : \"\");\n      } else {\n        number = sign + \"0.\" + new Array(-exponent + 1).join(\"0\") + mantisa;\n      }\n    }\n    return number;\n  };\n  bigDecimal.prototype.getValue = function () {\n    return this.value;\n  };\n  bigDecimal.prototype.setValue = function (num) {\n    this.value = bigDecimal.validate(num);\n  };\n  bigDecimal.getPrettyValue = function (number, digits, separator) {\n    if (digits === void 0) {\n      digits = 3;\n    }\n    if (separator === void 0) {\n      separator = \",\";\n    }\n    // if (!(digits || separator)) {\n    //     digits = 3;\n    //     separator = ',';\n    // } else if (!(digits && separator)) {\n    //     throw Error('Illegal Arguments. Should pass both digits and separator or pass none');\n    // }\n    number = bigDecimal.validate(number);\n    var neg = number.charAt(0) == \"-\";\n    if (neg) number = number.substring(1);\n    var len = number.indexOf(\".\");\n    len = len > 0 ? len : number.length;\n    var temp = \"\";\n    for (var i = len; i > 0;) {\n      if (i < digits) {\n        digits = i;\n        i = 0;\n      } else i -= digits;\n      temp = number.substring(i, i + digits) + (i < len - digits && i >= 0 ? separator : \"\") + temp;\n    }\n    return (neg ? \"-\" : \"\") + temp + number.substring(len);\n  };\n  bigDecimal.prototype.getPrettyValue = function (digits, separator) {\n    if (digits === void 0) {\n      digits = 3;\n    }\n    if (separator === void 0) {\n      separator = \",\";\n    }\n    return bigDecimal.getPrettyValue(this.value, digits, separator);\n  };\n  bigDecimal.round = function (number, precision, mode) {\n    if (precision === void 0) {\n      precision = 0;\n    }\n    if (mode === void 0) {\n      mode = RoundingModes.HALF_EVEN;\n    }\n    number = bigDecimal.validate(number);\n    // console.log(number)\n    if (isNaN(precision)) throw Error(\"Precision is not a number: \" + precision);\n    return roundOff(number, precision, mode);\n  };\n  bigDecimal.prototype.round = function (precision, mode) {\n    if (precision === void 0) {\n      precision = 0;\n    }\n    if (mode === void 0) {\n      mode = RoundingModes.HALF_EVEN;\n    }\n    if (isNaN(precision)) throw Error(\"Precision is not a number: \" + precision);\n    return new bigDecimal(roundOff(this.value, precision, mode));\n  };\n  bigDecimal.abs = function (number) {\n    number = bigDecimal.validate(number);\n    return abs(number);\n  };\n  bigDecimal.prototype.abs = function () {\n    return new bigDecimal(abs(this.value));\n  };\n  bigDecimal.floor = function (number) {\n    number = bigDecimal.validate(number);\n    if (number.indexOf(\".\") === -1) return number;\n    return bigDecimal.round(number, 0, RoundingModes.FLOOR);\n  };\n  bigDecimal.prototype.floor = function () {\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\n    return new bigDecimal(this.value).round(0, RoundingModes.FLOOR);\n  };\n  bigDecimal.ceil = function (number) {\n    number = bigDecimal.validate(number);\n    if (number.indexOf(\".\") === -1) return number;\n    return bigDecimal.round(number, 0, RoundingModes.CEILING);\n  };\n  bigDecimal.prototype.ceil = function () {\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\n    return new bigDecimal(this.value).round(0, RoundingModes.CEILING);\n  };\n  bigDecimal.add = function (number1, number2) {\n    number1 = bigDecimal.validate(number1);\n    number2 = bigDecimal.validate(number2);\n    return add(number1, number2);\n  };\n  bigDecimal.prototype.add = function (number) {\n    return new bigDecimal(add(this.value, number.getValue()));\n  };\n  bigDecimal.subtract = function (number1, number2) {\n    number1 = bigDecimal.validate(number1);\n    number2 = bigDecimal.validate(number2);\n    return subtract(number1, number2);\n  };\n  bigDecimal.prototype.subtract = function (number) {\n    return new bigDecimal(subtract(this.value, number.getValue()));\n  };\n  bigDecimal.multiply = function (number1, number2) {\n    number1 = bigDecimal.validate(number1);\n    number2 = bigDecimal.validate(number2);\n    return multiply(number1, number2);\n  };\n  bigDecimal.prototype.multiply = function (number) {\n    return new bigDecimal(multiply(this.value, number.getValue()));\n  };\n  bigDecimal.divide = function (number1, number2, precision) {\n    number1 = bigDecimal.validate(number1);\n    number2 = bigDecimal.validate(number2);\n    return divide(number1, number2, precision);\n  };\n  bigDecimal.prototype.divide = function (number, precision) {\n    return new bigDecimal(divide(this.value, number.getValue(), precision));\n  };\n  bigDecimal.modulus = function (number1, number2) {\n    number1 = bigDecimal.validate(number1);\n    number2 = bigDecimal.validate(number2);\n    return modulus(number1, number2);\n  };\n  bigDecimal.prototype.modulus = function (number) {\n    return new bigDecimal(modulus(this.value, number.getValue()));\n  };\n  bigDecimal.compareTo = function (number1, number2) {\n    number1 = bigDecimal.validate(number1);\n    number2 = bigDecimal.validate(number2);\n    return compareTo(number1, number2);\n  };\n  bigDecimal.prototype.compareTo = function (number) {\n    return compareTo(this.value, number.getValue());\n  };\n  bigDecimal.negate = function (number) {\n    number = bigDecimal.validate(number);\n    return negate(number);\n  };\n  bigDecimal.prototype.negate = function () {\n    return new bigDecimal(negate(this.value));\n  };\n  bigDecimal.stripTrailingZero = function (number) {\n    number = bigDecimal.validate(number);\n    return stripTrailingZero(number);\n  };\n  bigDecimal.prototype.stripTrailingZero = function () {\n    return new bigDecimal(stripTrailingZero(this.value));\n  };\n  bigDecimal.RoundingModes = RoundingModes;\n  return bigDecimal;\n}();\nexport { bigDecimal as default };","map":{"version":3,"names":["add","number1","number2","neg","ind","substring","testZero","length","trim","_a","pad","compliment","res","addCore","number","s","l","dec","split","ld","i","parseInt","one","Array","join","parts","parts1","parts2","length1","length2","Math","abs","sum","carry","temp","floor","toString","test","n","RoundingModes","roundOff","input","mode","HALF_EVEN","UNNECESSARY","Error","partInt","partDec","prefix","substr","greaterThanFive","increment","rem","part","pre","DOWN","FLOOR","CEILING","UP","five","HALF_DOWN","HALF_UP","c","x","reverse","stripTrailingZero","isNegative","indexOf","multiply","negative","decimalLength1","decimalLength2","decimalLength","replace","positionVector","currentPosition","result","j","adjustDecimal","decimal","divide","dividend","divisor","precission","pt_dvsr","pt_dvnd","loc","prec","dl","quotent","dvnd","shift","qt","subtract","negate","modulus","validate","sign","oparand","compareTo","map","_b","localeCompare","bigDecimal","value","isNaN","startsWith","mantisa","exponent","prototype","getValue","setValue","num","getPrettyValue","digits","separator","charAt","len","round","precision","ceil"],"sources":["/Users/caizhitan/BCM_Reports/node_modules/src/add.ts","/Users/caizhitan/BCM_Reports/node_modules/src/abs.ts","/Users/caizhitan/BCM_Reports/node_modules/src/roundingModes.ts","/Users/caizhitan/BCM_Reports/node_modules/src/round.ts","/Users/caizhitan/BCM_Reports/node_modules/src/stripTrailingZero.ts","/Users/caizhitan/BCM_Reports/node_modules/src/multiply.ts","/Users/caizhitan/BCM_Reports/node_modules/src/divide.ts","/Users/caizhitan/BCM_Reports/node_modules/src/subtract.ts","/Users/caizhitan/BCM_Reports/node_modules/src/modulus.ts","/Users/caizhitan/BCM_Reports/node_modules/src/compareTo.ts","/Users/caizhitan/BCM_Reports/node_modules/src/big-decimal.ts"],"sourcesContent":["//function add {\r\nexport function add(number1: string, number2 = \"0\") {\r\n  let neg = 0,\r\n    ind = -1,\r\n    neg_len;\r\n\r\n  //check for negatives\r\n  if (number1[0] == \"-\") {\r\n    number1 = number1.substring(1);\r\n    if (!testZero(number1)) {\r\n      neg++;\r\n      ind = 1;\r\n      neg_len = number1.length;\r\n    }\r\n  }\r\n  if (number2[0] == \"-\") {\r\n    number2 = number2.substring(1);\r\n    if (!testZero(number2)) {\r\n      neg++;\r\n      ind = 2;\r\n      neg_len = number2.length;\r\n    }\r\n  }\r\n\r\n  number1 = trim(number1);\r\n  number2 = trim(number2);\r\n\r\n  [number1, number2] = pad(trim(number1), trim(number2));\r\n\r\n  if (neg == 1) {\r\n    if (ind === 1) number1 = compliment(number1);\r\n    else if (ind === 2) number2 = compliment(number2);\r\n  }\r\n\r\n  let res = addCore(number1, number2);\r\n  if (!neg) return trim(res);\r\n  else if (neg == 2) return \"-\" + trim(res);\r\n  else {\r\n    if (number1.length < res.length) return trim(res.substring(1));\r\n    else return \"-\" + trim(compliment(res));\r\n  }\r\n}\r\n\r\nfunction compliment(number: string) {\r\n  if (testZero(number)) {\r\n    return number;\r\n  }\r\n\r\n  let s = \"\",\r\n    l = number.length,\r\n    dec = number.split(\".\")[1],\r\n    ld = dec ? dec.length : 0;\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    if (number[i] >= \"0\" && number[i] <= \"9\") s += 9 - parseInt(number[i]);\r\n    else s += number[i];\r\n  }\r\n\r\n  let one = ld > 0 ? \"0.\" + new Array(ld).join(\"0\") + \"1\" : \"1\";\r\n\r\n  return addCore(s, one);\r\n}\r\n\r\nexport function trim(number: string) {\r\n  let parts = number.split(\".\");\r\n\r\n  if (!parts[0]) parts[0] = \"0\";\r\n\r\n  while (parts[0][0] == \"0\" && parts[0].length > 1)\r\n    parts[0] = parts[0].substring(1);\r\n\r\n  return parts[0] + (parts[1] ? \".\" + parts[1] : \"\");\r\n}\r\n\r\nexport function pad(number1: string, number2: string) {\r\n  let parts1 = number1.split(\".\"),\r\n    parts2 = number2.split(\".\");\r\n\r\n  //pad integral part\r\n  let length1 = parts1[0].length,\r\n    length2 = parts2[0].length;\r\n  if (length1 > length2) {\r\n    parts2[0] =\r\n      new Array(Math.abs(length1 - length2) + 1).join(\"0\") +\r\n      (parts2[0] ? parts2[0] : \"\");\r\n  } else {\r\n    parts1[0] =\r\n      new Array(Math.abs(length1 - length2) + 1).join(\"0\") +\r\n      (parts1[0] ? parts1[0] : \"\");\r\n  }\r\n\r\n  //pad fractional part\r\n  (length1 = parts1[1] ? parts1[1].length : 0),\r\n    (length2 = parts2[1] ? parts2[1].length : 0);\r\n  if (length1 || length2) {\r\n    if (length1 > length2) {\r\n      parts2[1] =\r\n        (parts2[1] ? parts2[1] : \"\") +\r\n        new Array(Math.abs(length1 - length2) + 1).join(\"0\");\r\n    } else {\r\n      parts1[1] =\r\n        (parts1[1] ? parts1[1] : \"\") +\r\n        new Array(Math.abs(length1 - length2) + 1).join(\"0\");\r\n    }\r\n  }\r\n\r\n  number1 = parts1[0] + (parts1[1] ? \".\" + parts1[1] : \"\");\r\n  number2 = parts2[0] + (parts2[1] ? \".\" + parts2[1] : \"\");\r\n\r\n  return [number1, number2];\r\n}\r\n\r\nfunction addCore(number1: string, number2: string) {\r\n  [number1, number2] = pad(number1, number2);\r\n\r\n  let sum = \"\",\r\n    carry = 0;\r\n\r\n  for (let i = number1.length - 1; i >= 0; i--) {\r\n    if (number1[i] === \".\") {\r\n      sum = \".\" + sum;\r\n      continue;\r\n    }\r\n    let temp = parseInt(number1[i]) + parseInt(number2[i]) + carry;\r\n    sum = (temp % 10) + sum;\r\n    carry = Math.floor(temp / 10);\r\n  }\r\n\r\n  return carry ? carry.toString() + sum : sum;\r\n}\r\n\r\nfunction testZero(number: string) {\r\n  return /^0[0]*[.]{0,1}[0]*$/.test(number);\r\n}\r\n","export function abs(n: number | string | bigint) {\r\n  if (typeof n == \"number\" || typeof n == \"bigint\") n = n.toString();\r\n  if (n[0] == \"-\") return n.substring(1);\r\n  return n;\r\n}\r\n","export enum RoundingModes {\r\n    /**\r\n     * Rounding mode to round towards positive infinity.\r\n     */\r\n    CEILING,\r\n\r\n    /**\r\n     * Rounding mode to round towards zero.\r\n     */\r\n    DOWN,\r\n\r\n    /**\r\n     * Rounding mode to round towards negative infinity.\r\n     */\r\n    FLOOR,\r\n\r\n    /**\r\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, \r\n     * in which case round down.\r\n     */\r\n    HALF_DOWN,\r\n\r\n    /**\r\n     * Rounding mode to round towards the \"nearest neighbor\" unless both neighbors are equidistant, \r\n     * in which case, round towards the even neighbor.\r\n     */\r\n    HALF_EVEN,\r\n\r\n    /**\r\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, \r\n     * in which case round up.\r\n     */\r\n    HALF_UP,\r\n\r\n    /**\r\n     * Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary.\r\n     * UNIMPLEMENTED\r\n     */\r\n    UNNECESSARY,\r\n\r\n    /**\r\n     * Rounding mode to round away from zero.\r\n     */\r\n    UP\r\n}\r\n\r\n","import { RoundingModes } from './roundingModes';\r\n/**\r\n * \r\n * @param input the number to round\r\n * @param n precision\r\n * @param mode Rounding Mode\r\n */\r\nexport function roundOff(input: number | string | bigint, n: number = 0, mode=RoundingModes.HALF_EVEN) {\r\n    if (mode === RoundingModes.UNNECESSARY) {\r\n        throw new Error(\"UNNECESSARY Rounding Mode has not yet been implemented\");\r\n    }\r\n\r\n    if (typeof (input) == 'number' || typeof (input) == 'bigint')\r\n        input = input.toString();\r\n\r\n    let neg = false;\r\n    if (input[0] === '-') {\r\n        neg = true;\r\n        input = input.substring(1);\r\n    }\r\n\r\n    let parts = input.split('.'),\r\n        partInt = parts[0],\r\n        partDec = parts[1];\r\n\r\n    //handle case of -ve n: roundOff(12564,-2)=12600\r\n    if (n < 0) {\r\n        n = -n;\r\n        if (partInt.length <= n)\r\n            return '0';\r\n        else {\r\n            let prefix = partInt.substr(0, partInt.length - n);\r\n            input = prefix + '.' + partInt.substr(partInt.length - n) + partDec;\r\n            prefix = roundOff(input, 0, mode);\r\n            return (neg ? '-' : '') + prefix + (new Array(n + 1).join('0'));\r\n        }\r\n    }\r\n\r\n\r\n    // handle case when integer output is desired\r\n    if (n == 0) {\r\n        let l = partInt.length;\r\n        if (greaterThanFive(parts[1], partInt, neg, mode)) {\r\n            partInt = increment(partInt);\r\n        }\r\n        return (neg&&parseInt(partInt) ? '-' : '') + partInt;\r\n    }\r\n\r\n\r\n    // handle case when n>0\r\n    if (!parts[1]) {\r\n        return (neg ? '-' : '') + partInt + '.' + (new Array(n + 1).join('0'));\r\n    } else if (parts[1].length < n) {\r\n        return (neg ? '-' : '') + partInt + '.' + parts[1] + (new Array(n - parts[1].length + 1).join('0'));\r\n    }\r\n\r\n    partDec = parts[1].substring(0, n);\r\n    let rem = parts[1].substring(n);\r\n\r\n    if (rem && greaterThanFive(rem, partDec, neg, mode)) {\r\n        partDec = increment(partDec);\r\n        if (partDec.length > n) {\r\n            return (neg ? '-' : '') + increment(partInt, parseInt(partDec[0])) + '.' + partDec.substring(1);\r\n        }\r\n    }\r\n    return (neg&&(parseInt(partInt) || parseInt(partDec)) ? '-' : '') + partInt + '.' + partDec;\r\n}\r\n\r\nfunction greaterThanFive(part: string, pre: string, neg: boolean, mode: RoundingModes) {\r\n    if (!part || part === new Array(part.length + 1).join('0'))\r\n        return false;\r\n\r\n    // #region UP, DOWN, CEILING, FLOOR \r\n    if (mode === RoundingModes.DOWN || (!neg && mode === RoundingModes.FLOOR) ||\r\n        (neg && mode === RoundingModes.CEILING))\r\n        return false;\r\n\r\n    if (mode === RoundingModes.UP || (neg && mode === RoundingModes.FLOOR) ||\r\n        (!neg && mode === RoundingModes.CEILING))\r\n        return true;\r\n    // #endregion\r\n\r\n    // case when part !== five\r\n    let five = '5' + (new Array(part.length).join('0'));\r\n    if (part > five)\r\n        return true;\r\n    else if (part < five)\r\n        return false;\r\n\r\n    // case when part === five\r\n    switch (mode) {\r\n        case RoundingModes.HALF_DOWN: return false;\r\n        case RoundingModes.HALF_UP: return true;\r\n        case RoundingModes.HALF_EVEN:\r\n        default: return (parseInt(pre[pre.length - 1]) % 2 == 1)\r\n    }\r\n}\r\n\r\nfunction increment(part, c: number = 0) {\r\n    if (!c)\r\n        c = 1;\r\n    if (typeof (part) == 'number')\r\n        part.toString();\r\n\r\n    let l = part.length - 1,\r\n        s = '';\r\n\r\n    for (let i = l; i >= 0; i--) {\r\n        let x = parseInt(part[i]) + c;\r\n        if (x == 10) {\r\n            c = 1; x = 0;\r\n        } else {\r\n            c = 0;\r\n        }\r\n        s += x;\r\n    }\r\n    if (c)\r\n        s += c;\r\n\r\n    return s.split('').reverse().join('');\r\n}","/*\r\n* Removes zero from front and back*/\r\nexport function stripTrailingZero(number) {\r\n\tconst isNegative = number[0] === '-';\r\n\tif (isNegative) {\r\n\t\tnumber = number.substr(1);\r\n\t}\r\n\twhile (number[0] == '0') {\r\n\t\tnumber = number.substr(1);\r\n\t}\r\n\tif (number.indexOf('.') != -1) {\r\n\t\twhile (number[number.length - 1] == '0') {\r\n\t\t\tnumber = number.substr(0, number.length - 1);\r\n\t\t}\r\n\t}\r\n\tif (number == \"\" || number == \".\") {\r\n\t\tnumber = '0';\r\n\t} else if (number[number.length - 1] == '.') {\r\n\t\tnumber = number.substr(0, number.length - 1);\r\n\t}\r\n\tif (number[0] == '.') {\r\n\t\tnumber = '0' + number;\r\n\t}\r\n\tif (isNegative && number != '0') {\r\n\t\tnumber = '-' + number;\r\n\t}\r\n\treturn number;\r\n}","import { stripTrailingZero } from \"./stripTrailingZero\"\r\n\r\nexport function multiply(number1, number2) {\r\n\tnumber1 = number1.toString();\r\n\tnumber2 = number2.toString();\r\n\r\n\t/*Filter numbers*/\r\n\tlet negative = 0;\r\n\tif (number1[0] == '-') {\r\n\t\tnegative++;\r\n\t\tnumber1 = number1.substr(1);\r\n\t}\r\n\tif (number2[0] == '-') {\r\n\t\tnegative++;\r\n\t\tnumber2 = number2.substr(1);\r\n\t}\r\n\tnumber1 = stripTrailingZero(number1);\r\n\tnumber2 = stripTrailingZero(number2);\r\n\tlet decimalLength1 = 0;\r\n\tlet decimalLength2 = 0;\r\n\r\n\tif (number1.indexOf('.') != -1) {\r\n\t\tdecimalLength1 = number1.length - number1.indexOf('.') - 1;\r\n\t}\r\n\r\n\tif (number2.indexOf('.') != -1) {\r\n\t\tdecimalLength2 = number2.length - number2.indexOf('.') - 1;\r\n\t}\r\n\tlet decimalLength = decimalLength1 + decimalLength2;\r\n\tnumber1 = stripTrailingZero(number1.replace('.', ''));\r\n\tnumber2 = stripTrailingZero(number2.replace('.', ''));\r\n\r\n\tif (number1.length < number2.length) {\r\n\t\tlet temp = number1;\r\n\t\tnumber1 = number2;\r\n\t\tnumber2 = temp;\r\n\t}\r\n\r\n\tif (number2 == '0') {\r\n\t\treturn '0';\r\n\t}\r\n\r\n\t/*\r\n\t* Core multiplication\r\n\t*/\r\n\tlet length = number2.length;\r\n\tlet carry = 0;\r\n\tlet positionVector = [];\r\n\tlet currentPosition = length - 1;\r\n\r\n\tlet result = \"\";\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tpositionVector[i] = number1.length - 1;\r\n\t}\r\n\tfor (let i = 0; i < 2 * number1.length; i++) {\r\n\t\tlet sum = 0;\r\n\t\tfor (let j = number2.length - 1; j >= currentPosition && j >= 0; j--) {\r\n\t\t\tif (positionVector[j] > -1 && positionVector[j] < number1.length) {\r\n\t\t\t\tsum += parseInt(number1[positionVector[j]--]) * parseInt(number2[j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsum += carry;\r\n\t\tcarry = Math.floor(sum / 10);\r\n\t\tresult = sum % 10 + result;\r\n\t\tcurrentPosition--;\r\n\t}\r\n\t/*\r\n\t* Formatting result\r\n\t*/\r\n\tresult = stripTrailingZero(adjustDecimal(result, decimalLength));\r\n\tif (negative == 1) {\r\n\t\tresult = '-' + result;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/*\r\n* Add decimal point\r\n*/\r\nfunction adjustDecimal(number, decimal) {\r\n\tif (decimal == 0)\r\n\t\treturn number;\r\n\telse {\r\n\t\tnumber = (decimal >= number.length) ? ((new Array(decimal - number.length + 1)).join('0') + number) : number;\r\n\t\treturn number.substr(0, number.length - decimal) + '.' + number.substr(number.length - decimal, decimal)\r\n\t}\r\n}\r\n","import { add, trim } from './add';\r\nimport { roundOff } from './round';\r\n\r\nexport function divide(dividend, divisor, precission = 8) {\r\n    if (divisor == 0) {\r\n        throw new Error('Cannot divide by 0');\r\n    }\r\n\r\n    dividend = dividend.toString();\r\n    divisor = divisor.toString();\r\n\r\n    // remove trailing zeros in decimal ISSUE#18\r\n    dividend = dividend.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\r\n    divisor = divisor.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\r\n\r\n    if (dividend == 0)\r\n        return '0';\r\n\r\n    let neg = 0;\r\n    if (divisor[0] == '-') {\r\n        divisor = divisor.substring(1);\r\n        neg++;\r\n    }\r\n    if (dividend[0] == '-') {\r\n        dividend = dividend.substring(1);\r\n        neg++;\r\n    }\r\n\r\n    var pt_dvsr = divisor.indexOf('.') > 0 ? divisor.length - divisor.indexOf('.') - 1 : -1;\r\n\r\n    divisor = trim(divisor.replace('.', ''));\r\n    if (pt_dvsr >= 0) {\r\n        let pt_dvnd = dividend.indexOf('.') > 0 ? dividend.length - dividend.indexOf('.') - 1 : -1;\r\n\r\n        if (pt_dvnd == -1) {\r\n            dividend = trim(dividend + (new Array(pt_dvsr + 1)).join('0'));\r\n        } else {\r\n            if (pt_dvsr > pt_dvnd) {\r\n                dividend = dividend.replace('.', '');\r\n                dividend = trim(dividend + (new Array(pt_dvsr - pt_dvnd + 1)).join('0'));\r\n            } else if (pt_dvsr < pt_dvnd) {\r\n                dividend = dividend.replace('.', '');\r\n                let loc = dividend.length - pt_dvnd + pt_dvsr;\r\n                dividend = trim(dividend.substring(0, loc) + '.' + dividend.substring(loc));\r\n            } else if (pt_dvsr == pt_dvnd) {\r\n                dividend = trim(dividend.replace('.', ''));\r\n            }\r\n        }\r\n    }\r\n\r\n    let prec = 0, dl = divisor.length, rem = '0', quotent = '';\r\n    let dvnd = (dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl) ? dividend.substring(0, dl + 1) : dividend.substring(0, dl);\r\n    dividend = (dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl) ? dividend.substring(dl + 1) : dividend.substring(dl);\r\n    \r\n    if (dvnd.indexOf('.') > -1) {\r\n        let shift = dvnd.length - dvnd.indexOf('.') - 1;\r\n        dvnd = dvnd.replace('.', '');\r\n        if (dl > dvnd.length) {\r\n            shift += dl - dvnd.length;\r\n            dvnd = dvnd + (new Array(dl - dvnd.length + 1)).join('0');\r\n        }\r\n        prec = shift;\r\n        quotent = '0.' + (new Array(shift)).join('0');\r\n\r\n    }\r\n\r\n    precission = precission + 2;\r\n\r\n    while (prec <= precission) {\r\n        let qt = 0;\r\n        while (parseInt(dvnd) >= parseInt(divisor)) {\r\n            dvnd = add(dvnd, '-' + divisor);\r\n            qt++;\r\n        }\r\n        quotent += qt;\r\n\r\n        if (!dividend) {\r\n            if (!prec)\r\n                quotent += '.';\r\n            prec++;\r\n            dvnd = dvnd + '0';\r\n        } else {\r\n            if (dividend[0] == '.') {\r\n                quotent += '.';\r\n                prec++;\r\n                dividend = dividend.substring(1);\r\n            }\r\n            dvnd = dvnd + dividend.substring(0, 1);\r\n            dividend = dividend.substring(1);\r\n        }\r\n    }\r\n\r\n    return ((neg == 1) ? '-' : '') + trim(roundOff(quotent, precission - 2));\r\n}","import { add } from './add';\r\n\r\nexport function subtract(number1, number2) {\r\n\tnumber1 = number1.toString();\r\n\tnumber2 = number2.toString();\r\n\tnumber2 = negate(number2);\r\n\treturn add(number1, number2);\r\n}\r\n\r\nexport function negate(number : string){\r\n\tif(number[0] == '-'){\r\n\t\tnumber = number.substr(1);\r\n\t}else{\r\n\t\tnumber = '-' + number;\r\n\t}\r\n\treturn number;\r\n}","import { divide } from './divide';\r\nimport { roundOff } from './round';\r\nimport { multiply } from './multiply';\r\nimport { subtract } from './subtract';\r\nimport { RoundingModes } from './roundingModes';\r\n\r\nexport function modulus(dividend: number|string, divisor:number|string) {\r\n    if (divisor == 0) {\r\n        throw new Error('Cannot divide by 0');\r\n    }\r\n\r\n    dividend = dividend.toString();\r\n    divisor = divisor.toString();\r\n\r\n    validate(dividend);\r\n    validate(divisor);\r\n\r\n    let sign = '';\r\n    if(dividend[0] == '-'){\r\n        sign = '-';\r\n        dividend = dividend.substr(1);\r\n    }\r\n    if(divisor[0] == '-'){\r\n        divisor = divisor.substr(1);\r\n    }\r\n\r\n    let result = subtract(dividend, multiply(divisor, roundOff(divide(dividend, divisor), 0, RoundingModes.FLOOR)));\r\n    return sign+result;\r\n}\r\n\r\nfunction validate(oparand: string) {\r\n    if (oparand.indexOf('.') != -1) {\r\n        throw new Error('Modulus of non-integers not supported');\r\n    }\r\n}\r\n","import { pad } from './add';\r\nimport {stripTrailingZero} from './stripTrailingZero';\r\n\r\nexport function compareTo(number1 : string, number2 : string) {\r\n\tlet negative = false;\r\n\t[number1, number2] = [number1, number2].map(n => stripTrailingZero(n));\r\n\tif(number1[0] == '-' && number2[0] != \"-\"){\r\n\t\treturn -1;\r\n\t}else if(number1[0] != '-' && number2[0] == '-'){\r\n\t\treturn 1;\r\n\t}else if(number1[0] == '-' && number2[0] == '-'){\r\n\t\tnumber1 = number1.substr(1);\r\n\t\tnumber2 = number2.substr(1);\r\n\t\tnegative = true;\r\n\t}\r\n\t[number1, number2] = pad(number1, number2);\r\n\tif(number1.localeCompare(number2) == 0){\r\n\t\treturn 0;\r\n\t}\r\n\tfor(let i = 0 ; i < number1.length ; i++){\r\n\t\tif(number1[i] == number2[i]){\r\n\t\t\tcontinue;\r\n\t\t}else if(number1[i] > number2[i]){\r\n\t\t\tif(negative){\r\n\t\t\t\treturn -1;\r\n\t\t\t}else{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(negative){\r\n\t\t\t\treturn 1;\r\n\t\t\t}else{\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\nfunction checkZero(number){\r\n\r\n}","import { add, trim } from \"./add\";\r\nimport { abs } from \"./abs\";\r\nimport { roundOff } from \"./round\";\r\nimport { multiply } from \"./multiply\";\r\nimport { divide } from \"./divide\";\r\nimport { modulus } from \"./modulus\";\r\nimport { compareTo } from \"./compareTo\";\r\nimport { subtract, negate } from \"./subtract\";\r\nimport { RoundingModes as Modes, RoundingModes } from \"./roundingModes\";\r\nimport { stripTrailingZero } from \"./stripTrailingZero\";\r\n\r\nclass bigDecimal {\r\n  private value: string;\r\n  static RoundingModes = Modes;\r\n\r\n  private static validate(number): string {\r\n    if (number) {\r\n      number = number.toString();\r\n      if (isNaN(number)) throw Error(\"Parameter is not a number: \" + number);\r\n\r\n      if (number[0] == \"+\") number = number.substring(1);\r\n    } else number = \"0\";\r\n\r\n    //handle missing leading zero\r\n    if (number.startsWith(\".\")) number = \"0\" + number;\r\n    else if (number.startsWith(\"-.\")) number = \"-0\" + number.substr(1);\r\n\r\n    //handle exponentiation\r\n    if (/e/i.test(number)) {\r\n      let [mantisa, exponent] = number.split(/[eE]/);\r\n      mantisa = trim(mantisa);\r\n\r\n      let sign = \"\";\r\n      if (mantisa[0] == \"-\") {\r\n        sign = \"-\";\r\n        mantisa = mantisa.substring(1);\r\n      }\r\n\r\n      if (mantisa.indexOf(\".\") >= 0) {\r\n        exponent = parseInt(exponent) + mantisa.indexOf(\".\");\r\n        mantisa = mantisa.replace(\".\", \"\");\r\n      } else {\r\n        exponent = parseInt(exponent) + mantisa.length;\r\n      }\r\n\r\n      if (mantisa.length < exponent) {\r\n        number =\r\n          sign + mantisa + new Array(exponent - mantisa.length + 1).join(\"0\");\r\n      } else if (mantisa.length >= exponent && exponent > 0) {\r\n        number =\r\n          sign +\r\n          trim(mantisa.substring(0, exponent)) +\r\n          (mantisa.length > exponent ? \".\" + mantisa.substring(exponent) : \"\");\r\n      } else {\r\n        number = sign + \"0.\" + new Array(-exponent + 1).join(\"0\") + mantisa;\r\n      }\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  constructor(number: number | string | bigint = \"0\") {\r\n    this.value = bigDecimal.validate(number);\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  setValue(num: number | string | bigint) {\r\n    this.value = bigDecimal.validate(num);\r\n  }\r\n\r\n  static getPrettyValue(number, digits = 3, separator = \",\"): string {\r\n    // if (!(digits || separator)) {\r\n    //     digits = 3;\r\n    //     separator = ',';\r\n    // } else if (!(digits && separator)) {\r\n    //     throw Error('Illegal Arguments. Should pass both digits and separator or pass none');\r\n    // }\r\n    number = bigDecimal.validate(number);\r\n    let neg = number.charAt(0) == \"-\";\r\n    if (neg) number = number.substring(1);\r\n    var len = number.indexOf(\".\");\r\n    len = len > 0 ? len : number.length;\r\n    var temp = \"\";\r\n    for (var i = len; i > 0; ) {\r\n      if (i < digits) {\r\n        digits = i;\r\n        i = 0;\r\n      } else i -= digits;\r\n\r\n      temp =\r\n        number.substring(i, i + digits) +\r\n        (i < len - digits && i >= 0 ? separator : \"\") +\r\n        temp;\r\n    }\r\n    return (neg ? \"-\" : \"\") + temp + number.substring(len);\r\n  }\r\n  getPrettyValue(digits = 3, separator = \",\") {\r\n    return bigDecimal.getPrettyValue(this.value, digits, separator);\r\n  }\r\n\r\n  static round(number, precision = 0, mode = Modes.HALF_EVEN) {\r\n    number = bigDecimal.validate(number);\r\n    // console.log(number)\r\n    if (isNaN(precision))\r\n      throw Error(\"Precision is not a number: \" + precision);\r\n    return roundOff(number, precision, mode);\r\n  }\r\n\r\n  round(precision = 0, mode = Modes.HALF_EVEN) {\r\n    if (isNaN(precision))\r\n      throw Error(\"Precision is not a number: \" + precision);\r\n\r\n    return new bigDecimal(roundOff(this.value, precision, mode));\r\n  }\r\n\r\n  static abs(number) {\r\n    number = bigDecimal.validate(number);\r\n    return abs(number);\r\n  }\r\n\r\n  abs() {\r\n    return new bigDecimal(abs(this.value));\r\n  }\r\n\r\n  static floor(number) {\r\n    number = bigDecimal.validate(number);\r\n    if (number.indexOf(\".\") === -1) return number;\r\n    return bigDecimal.round(number, 0, RoundingModes.FLOOR);\r\n  }\r\n\r\n  floor() {\r\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\r\n    return new bigDecimal(this.value).round(0, RoundingModes.FLOOR);\r\n  }\r\n\r\n  static ceil(number) {\r\n    number = bigDecimal.validate(number);\r\n    if (number.indexOf(\".\") === -1) return number;\r\n    return bigDecimal.round(number, 0, RoundingModes.CEILING);\r\n  }\r\n\r\n  ceil() {\r\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\r\n    return new bigDecimal(this.value).round(0, RoundingModes.CEILING);\r\n  }\r\n\r\n  static add(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return add(number1, number2);\r\n  }\r\n\r\n  add(number: bigDecimal) {\r\n    return new bigDecimal(add(this.value, number.getValue()));\r\n  }\r\n\r\n  static subtract(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return subtract(number1, number2);\r\n  }\r\n\r\n  subtract(number: bigDecimal) {\r\n    return new bigDecimal(subtract(this.value, number.getValue()));\r\n  }\r\n\r\n  static multiply(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return multiply(number1, number2);\r\n  }\r\n\r\n  multiply(number: bigDecimal) {\r\n    return new bigDecimal(multiply(this.value, number.getValue()));\r\n  }\r\n\r\n  static divide(number1, number2, precision?: number) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return divide(number1, number2, precision);\r\n  }\r\n\r\n  divide(number: bigDecimal, precision?: number) {\r\n    return new bigDecimal(divide(this.value, number.getValue(), precision));\r\n  }\r\n\r\n  static modulus(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return modulus(number1, number2);\r\n  }\r\n\r\n  modulus(number: bigDecimal) {\r\n    return new bigDecimal(modulus(this.value, number.getValue()));\r\n  }\r\n\r\n  static compareTo(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return compareTo(number1, number2);\r\n  }\r\n\r\n  compareTo(number: bigDecimal) {\r\n    return compareTo(this.value, number.getValue());\r\n  }\r\n\r\n  static negate(number) {\r\n    number = bigDecimal.validate(number);\r\n    return negate(number);\r\n  }\r\n\r\n  negate() {\r\n    return new bigDecimal(negate(this.value));\r\n  }\r\n\r\n  static stripTrailingZero(number) {\r\n    number = bigDecimal.validate(number);\r\n    return stripTrailingZero(number);\r\n  }\r\n\r\n  stripTrailingZero() {\r\n    return new bigDecimal(stripTrailingZero(this.value));\r\n  }\r\n}\r\nexport default bigDecimal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}