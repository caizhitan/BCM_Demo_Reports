{"ast":null,"code":"import dayjs from \"dayjs\";\nimport bigDecimal from \"js-big-decimal\";\nimport { FirstReportData } from \"../FirstReport/FirstReportData\";\nimport { roundGrandTotal } from \"../../RoundingRules\";\nfunction calculateThirdReportData(data) {\n  const result = {};\n  for (const contract in data) {\n    if (data.hasOwnProperty(contract)) {\n      const contractData = data[contract];\n      result[contract] = [];\n      const yearlyTotals = {};\n      const periodStartDates = {};\n      const periodEndDates = {};\n      for (const service in contractData) {\n        if (contractData.hasOwnProperty(service)) {\n          const records = contractData[service];\n          records.forEach(record => {\n            const year = record.endYear;\n            const unitRate = new bigDecimal(record.unitRate);\n            const mileage = new bigDecimal(record.mileage);\n            const sfCost = new bigDecimal(record.sfCost);\n            const leaseFee = new bigDecimal(record.leaseFee);\n            const earliestDate = dayjs(record.dayJSPeriodDateStart);\n            const latestDate = dayjs(record.dayJSPeriodDateEnd);\n            if (!yearlyTotals[year]) {\n              yearlyTotals[year] = {\n                mileage: new bigDecimal(0),\n                sfCost: new bigDecimal(0),\n                leaseFee: new bigDecimal(0),\n                unitRate: new bigDecimal(0)\n              };\n              periodStartDates[year] = earliestDate;\n              periodEndDates[year] = latestDate;\n            } else {\n              if (earliestDate.isBefore(periodStartDates[year])) {\n                periodStartDates[year] = earliestDate;\n              }\n              if (latestDate.isAfter(periodEndDates[year])) {\n                periodEndDates[year] = latestDate;\n              }\n            }\n            yearlyTotals[year].unitRate = unitRate;\n            yearlyTotals[year].mileage = yearlyTotals[year].mileage.add(mileage);\n            yearlyTotals[year].sfCost = yearlyTotals[year].sfCost.add(sfCost);\n            yearlyTotals[year].leaseFee = yearlyTotals[year].leaseFee.add(leaseFee);\n          });\n        }\n      }\n      for (const year in yearlyTotals) {\n        result[contract].push({\n          endYear: year,\n          unitRate: yearlyTotals[year].unitRate.getValue(),\n          totalMileage: yearlyTotals[year].mileage.getValue(),\n          totalSF: yearlyTotals[year].sfCost.getValue(),\n          totalLF: yearlyTotals[year].leaseFee.getValue(),\n          periodStartDates: periodStartDates[year].format(\"YYYY-MM-DD\"),\n          periodEndDates: periodEndDates[year].format(\"YYYY-MM-DD\"),\n          reportStartDate: periodStartDates[year].format(\"D MMM YYYY\"),\n          reportEndDate: periodEndDates[year].format(\"D MMM YYYY\")\n        });\n      }\n    }\n  }\n  return result;\n}\nconst ThirdReportData = calculateThirdReportData(FirstReportData);\n_c = ThirdReportData;\nconsole.log(\"muh report #3 Data:\", ThirdReportData);\nfunction calculateTotalData(data) {\n  const results = {};\n\n  // Loop through each contract in the data\n  for (const contract in data) {\n    let totalMileageSum = new bigDecimal(0);\n    let totalServiceFeeSum = new bigDecimal(0);\n    let totalLeaseFeeSum = new bigDecimal(0);\n\n    // Loop through each entry in the contract\n    data[contract].forEach(entry => {\n      const mileage = new bigDecimal(entry.totalMileage || \"0\");\n      totalMileageSum = totalMileageSum.add(mileage);\n      const serviceFee = new bigDecimal(entry.totalSF || \"0\");\n      totalServiceFeeSum = totalServiceFeeSum.add(serviceFee);\n      const leaseFee = new bigDecimal(entry.totalLF || \"0\");\n      totalLeaseFeeSum = totalLeaseFeeSum.add(leaseFee);\n    });\n\n    // Calculate grand total\n    let grandTotal = totalMileageSum.add(totalServiceFeeSum).add(totalLeaseFeeSum);\n\n    // Convert grandTotal to a number for rounding\n    let numericGrandTotal = parseFloat(grandTotal.getValue());\n    results[contract] = {\n      totalMileage: totalMileageSum.getValue(),\n      totalServiceFee: totalServiceFeeSum.getValue(),\n      totalLeaseFee: totalLeaseFeeSum.getValue(),\n      grandTotal: grandTotal.getValue(),\n      aboutTotal: roundGrandTotal(numericGrandTotal).toString()\n    };\n  }\n  return results;\n}\nconst totalThirdReportData = calculateTotalData(ThirdReportData);\nconsole.log(\"muh report #3 Total Data:\", totalThirdReportData);\nexport { ThirdReportData, totalThirdReportData };\nvar _c;\n$RefreshReg$(_c, \"ThirdReportData\");","map":{"version":3,"names":["dayjs","bigDecimal","FirstReportData","roundGrandTotal","calculateThirdReportData","data","result","contract","hasOwnProperty","contractData","yearlyTotals","periodStartDates","periodEndDates","service","records","forEach","record","year","endYear","unitRate","mileage","sfCost","leaseFee","earliestDate","dayJSPeriodDateStart","latestDate","dayJSPeriodDateEnd","isBefore","isAfter","add","push","getValue","totalMileage","totalSF","totalLF","format","reportStartDate","reportEndDate","ThirdReportData","_c","console","log","calculateTotalData","results","totalMileageSum","totalServiceFeeSum","totalLeaseFeeSum","entry","serviceFee","grandTotal","numericGrandTotal","parseFloat","totalServiceFee","totalLeaseFee","aboutTotal","toString","totalThirdReportData","$RefreshReg$"],"sources":["/Users/caizhitan/BCM_Reports/src/Pages/Admin/Reports/ThirdReport/ThirdReportData.js"],"sourcesContent":["import dayjs from \"dayjs\";\nimport bigDecimal from \"js-big-decimal\";\nimport { FirstReportData } from \"../FirstReport/FirstReportData\";\nimport { roundGrandTotal } from \"../../RoundingRules\"\n\n\nfunction calculateThirdReportData(data) {\n  const result = {};\n  \n  for (const contract in data) {\n    if (data.hasOwnProperty(contract)) {\n      const contractData = data[contract];\n      result[contract] = [];\n\n      const yearlyTotals = {};\n      const periodStartDates = {};\n      const periodEndDates = {};\n\n      for (const service in contractData) {\n        if (contractData.hasOwnProperty(service)) {\n          const records = contractData[service];\n\n          records.forEach((record) => {\n            const year = record.endYear;\n            const unitRate = new bigDecimal(record.unitRate);\n            const mileage = new bigDecimal(record.mileage);\n            const sfCost = new bigDecimal(record.sfCost);\n            const leaseFee = new bigDecimal(record.leaseFee);\n            const earliestDate = dayjs(record.dayJSPeriodDateStart);\n            const latestDate = dayjs(record.dayJSPeriodDateEnd);\n\n            if (!yearlyTotals[year]) {\n              yearlyTotals[year] = {\n                mileage: new bigDecimal(0),\n                sfCost: new bigDecimal(0),\n                leaseFee: new bigDecimal(0),\n                unitRate: new bigDecimal(0),\n              };\n              periodStartDates[year] = earliestDate;\n              periodEndDates[year] = latestDate;\n            } else {\n              if (earliestDate.isBefore(periodStartDates[year])) {\n                periodStartDates[year] = earliestDate;\n              }\n              if (latestDate.isAfter(periodEndDates[year])) {\n                periodEndDates[year] = latestDate;\n              }\n            }\n\n            yearlyTotals[year].unitRate = unitRate;\n            yearlyTotals[year].mileage =\n              yearlyTotals[year].mileage.add(mileage);\n            yearlyTotals[year].sfCost = yearlyTotals[year].sfCost.add(sfCost);\n            yearlyTotals[year].leaseFee =\n              yearlyTotals[year].leaseFee.add(leaseFee);\n          });\n        }\n      }\n\n      for (const year in yearlyTotals) {\n        result[contract].push({\n          endYear: year,\n          unitRate: yearlyTotals[year].unitRate.getValue(),\n          totalMileage: yearlyTotals[year].mileage.getValue(),\n          totalSF: yearlyTotals[year].sfCost.getValue(),\n          totalLF: yearlyTotals[year].leaseFee.getValue(),\n          periodStartDates: periodStartDates[year].format(\"YYYY-MM-DD\"),\n          periodEndDates: periodEndDates[year].format(\"YYYY-MM-DD\"),\n          reportStartDate: periodStartDates[year].format(\"D MMM YYYY\"),\n          reportEndDate: periodEndDates[year].format(\"D MMM YYYY\"),\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\nconst ThirdReportData = calculateThirdReportData(FirstReportData);\nconsole.log(\"muh report #3 Data:\", ThirdReportData);\n\nfunction calculateTotalData(data) {\n  const results = {};\n\n  // Loop through each contract in the data\n  for (const contract in data) {\n    let totalMileageSum = new bigDecimal(0);\n    let totalServiceFeeSum = new bigDecimal(0);\n    let totalLeaseFeeSum = new bigDecimal(0);\n\n    // Loop through each entry in the contract\n    data[contract].forEach((entry) => {\n      const mileage = new bigDecimal(entry.totalMileage || \"0\");\n      totalMileageSum = totalMileageSum.add(mileage);\n      const serviceFee = new bigDecimal(entry.totalSF || \"0\");\n      totalServiceFeeSum = totalServiceFeeSum.add(serviceFee);\n      const leaseFee = new bigDecimal(entry.totalLF || \"0\");\n      totalLeaseFeeSum = totalLeaseFeeSum.add(leaseFee);\n    });\n\n    // Calculate grand total\n    let grandTotal = totalMileageSum\n      .add(totalServiceFeeSum)\n      .add(totalLeaseFeeSum);\n\n    // Convert grandTotal to a number for rounding\n    let numericGrandTotal = parseFloat(grandTotal.getValue());\n\n    results[contract] = {\n      totalMileage: totalMileageSum.getValue(),\n      totalServiceFee: totalServiceFeeSum.getValue(),\n      totalLeaseFee: totalLeaseFeeSum.getValue(),\n      grandTotal: grandTotal.getValue(),\n      aboutTotal: roundGrandTotal(numericGrandTotal).toString(),\n    };\n  }\n\n  return results;\n}\n\nconst totalThirdReportData = calculateTotalData(ThirdReportData);\nconsole.log(\"muh report #3 Total Data:\", totalThirdReportData);\n\nexport { ThirdReportData, totalThirdReportData };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}